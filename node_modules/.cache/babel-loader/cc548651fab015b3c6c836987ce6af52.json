{"ast":null,"code":"/*!\n  * PhotoSwipe 5.3.0 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {undefined | null | false | '' | 0} Falsy */\n\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\n\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName || 'div');\n\n  if (className) {\n    el.className = className;\n  }\n\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  } // @ts-expect-error\n\n\n  return el;\n}\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\n\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n\n  return p1;\n}\n/**\r\n * @param {Point} p\r\n */\n\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\n\n\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\n\n\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\n\n\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\n\n\nfunction toTransformString(x, y, scale) {\n  let propValue = 'translate3d(' + x + 'px,' + (y || 0) + 'px' + ',0)';\n\n  if (scale !== undefined) {\n    propValue += ' scale3d(' + scale + ',' + scale + ',1)';\n  }\n\n  return propValue;\n}\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\n\n\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\n\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\n\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop ? prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing) : 'none';\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? w + 'px' : w;\n  el.style.height = typeof h === 'number' ? h + 'px' : h;\n}\n/**\r\n * @param {HTMLElement} el\r\n */\n\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\n\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode();\n  }\n\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n\n    img.onerror = reject;\n  });\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\n\nfunction specialKeyUsed(e) {\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\n    return true;\n  }\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n} // Detect passive event listener support\n\n\nlet supportsPassive = false;\n/* eslint-disable */\n\ntry {\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\n\n\nclass DOMEvents {\n  constructor() {\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\n    this._pool = [];\n  }\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\n\n\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\n\n\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n  /**\r\n   * Removes all bound events\r\n   */\n\n\n  removeAll() {\n    this._pool.forEach(poolItem => {\n      this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);\n    });\n\n    this._pool = [];\n  }\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\n\n\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\n    const types = type.split(' ');\n    types.forEach(eType => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter(poolItem => {\n              return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        } // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n\n\n        const eventOptions = supportsPassive ? {\n          passive: passive || false\n        } : false;\n        target[methodName](eType, listener, eventOptions);\n      }\n    });\n  }\n\n}\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\n\n\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  /** @type {number} */\n  let paddingValue;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return paddingValue || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\n\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/** @typedef {'x' | 'y'} Axis */\n\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\n\n\nclass PanBounds {\n  /**\r\n   * @param {Slide} slide\r\n   */\n  constructor(slide) {\n    this.slide = slide;\n    this.currZoomLevel = 1;\n    /** @type {Point} */\n\n    this.center = {};\n    /** @type {Point} */\n\n    this.max = {};\n    /** @type {Point} */\n\n    this.min = {};\n    this.reset();\n  }\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n\n      this._updateAxis('y');\n\n      this.slide.pswp.dispatch('calcBounds', {\n        slide: this.slide\n      });\n    }\n  }\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\n\n\n  _updateAxis(axis) {\n    const {\n      pswp\n    } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);\n    const panAreaSize = this.slide.panAreaSize[axis]; // Default position of element.\n    // By defaul it is center of viewport:\n\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding; // maximum pan position\n\n    this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis]; // minimum pan position\n\n    this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];\n  } // _getZeroBounds\n\n\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\n\n\n  correctPan(axis, panOffset) {\n    // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\n\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    this.elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.panAreaSize = panAreaSize;\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\n\n\n  _parseZoomLevelOption(optionPrefix) {\n    // eslint-disable-next-line max-len\n    const optionName = optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getMax() {\n    const currZoomLevel = this._parseZoomLevelOption('max');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n\n\n    return Math.max(1, this.fit * 4);\n  }\n\n}\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * Renders and allows to control a single slide\r\n */\n\n\nclass Slide {\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = index === pswp.currIndex;\n    this.currentResolution = 0;\n    /** @type {Point} */\n\n    this.panAreaSize = {};\n    this.isFirstSlide = this.isActive && !pswp.opener.isOpen;\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\n    this.container = createElement('pswp__zoom-wrap');\n    this.currZoomLevel = 1;\n    /** @type {number} */\n\n    this.width = this.content.width;\n    /** @type {number} */\n\n    this.height = this.content.height;\n    this.bounds = new PanBounds(this);\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n    this.pswp.dispatch('slideInit', {\n      slide: this\n    });\n  }\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\n\n\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\n\n\n  append(holderElement) {\n    this.holderElement = holderElement;\n    this.container.style.transformOrigin = '0 0'; // Slide appended to DOM\n\n    if (!this.data) {\n      return;\n    }\n\n    this.calculateSize();\n    this.load();\n    this.updateContentSize();\n    this.appendHeavy();\n    this.holderElement.appendChild(this.container);\n    this.zoomAndPanToInitial();\n    this.pswp.dispatch('firstZoomPan', {\n      slide: this\n    });\n    this.applyCurrentZoomPan();\n    this.pswp.dispatch('afterSetContent', {\n      slide: this\n    });\n\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n\n  load() {\n    this.content.load();\n    this.pswp.dispatch('slideLoad', {\n      slide: this\n    });\n  }\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\n\n\n  appendHeavy() {\n    const {\n      pswp\n    } = this;\n    const appendHeavyNearby = true; // todo\n    // Avoid appending heavy elements during animations\n\n    if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) {\n      return;\n    }\n\n    if (this.pswp.dispatch('appendHeavy', {\n      slide: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.heavyAppended = true;\n    this.content.append();\n    this.pswp.dispatch('appendHeavyContent', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\n\n\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\n\n\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\n      // allow filtering\n      this.calculateSize();\n    } // reset zoom level\n\n\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n    this.pswp.dispatch('slideDeactivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\n\n\n  destroy() {\n    this.content.hasSlide = false;\n    this.content.remove();\n    this.container.remove();\n    this.pswp.dispatch('slideDestroy', {\n      slide: this\n    });\n  }\n\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\n\n\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n\n    if (!scaleMultiplier) {\n      return;\n    }\n\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n\n    this.content.setDisplayedSize(width, height);\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n\n    return false;\n  }\n\n  getPlaceholderElement() {\n    if (this.content.placeholder) {\n      return this.content.placeholder.element;\n    }\n  }\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\n\n\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const {\n      pswp\n    } = this;\n\n    if (!this.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel,\n      centerPoint,\n      transitionDuration\n    }); // stop all pan and zoom transitions\n\n    pswp.animations.stopAllPan(); // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    } // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n\n      this.applyCurrentZoomPan();\n    };\n\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\n\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);\n  }\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\n\n\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);\n  }\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\n\n\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\n\n\n  isPannable() {\n    return this.width && this.currZoomLevel > this.zoomLevels.fit;\n  }\n  /**\r\n   * If the slide can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.width && this.content.isZoomable();\n  }\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\n\n\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', {\n        slide: this\n      });\n    }\n  }\n\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial; // pan according to the zoom level\n\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', {\n      slide: this\n    });\n  }\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\n\n\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n\n  calculateSize() {\n    const {\n      pswp\n    } = this;\n    equalizePoints(this.panAreaSize, getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index));\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\n\n\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n    this.pswp.dispatch('resolutionChanged');\n  }\n\n}\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6; // 1 corresponds to the third of viewport height\n\nconst MIN_RATIO_TO_CLOSE = 0.4; // Minimum speed required to navigate\n// to next or previous slide\n\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n/**\r\n * Handles single pointer dragging\r\n */\n\n\nclass DragHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    /** @type {Point} */\n\n    this.startPan = {};\n  }\n\n  start() {\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    this.pswp.animations.stopAll();\n  }\n\n  change() {\n    const {\n      p1,\n      prevP1,\n      dragAxis,\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (dragAxis === 'y' && pswp.options.closeOnVerticalDrag && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n\n      if (!pswp.dispatch('verticalDrag', {\n        panY\n      }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n\n        roundPoint(currSlide.pan);\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n\n  end() {\n    const {\n      pswp,\n      velocity\n    } = this.gestures;\n    const {\n      mainScroll\n    } = pswp;\n    let indexDiff = 0;\n    pswp.animations.stopAll(); // Handle main scroll if it's shifted\n\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX(); // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is vicible\n      // 1 - slide is fully visible\n\n      const currentSlideVisibilityRatio = mainScrollShiftDiff / pswp.viewportSize.x; // Go next slide.\n      //\n      // - if velocity and its direction is matched\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n\n      if (velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if (velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    } // Restore zoom level\n\n\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n\n      this._finishPanGestureForAxis('y');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\n\n\n  _finishPanGestureForAxis(axis) {\n    const {\n      pswp\n    } = this;\n    const {\n      currSlide\n    } = pswp;\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = pswp.bgOpacity < 1 && axis === 'y'; // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Inceasing this number will reduce travel distance\n\n    const decelerationRate = 0.995; // 0.99\n    // Pan position if there is no bounds\n\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition); // If we are above and moving upwards,\n      // or if we are below and moving downwards\n\n\n      if (vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE) {\n        pswp.close();\n        return;\n      }\n    } // Pan position with corrected bounds\n\n\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition); // Exit if pan position should not be changed\n    // or if speed it too low\n\n    if (panPos === correctedPanPosition) {\n      return;\n    } // Overshoot if the final position is out of pan bounds\n\n\n    const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;\n    const initialBgOpacity = pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n    pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: pos => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist; // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n\n          pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));\n        }\n\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\n\n\n  _panOrMoveMainScroll(axis) {\n    const {\n      p1,\n      pswp,\n      dragAxis,\n      prevP1,\n      isMultitouch\n    } = this.gestures;\n    const {\n      currSlide,\n      mainScroll\n    } = pswp;\n    const delta = p1[axis] - prevP1[axis];\n    const newMainScrollX = mainScroll.x + delta;\n\n    if (!delta) {\n      return;\n    } // Always move main scroll if image can not be panned\n\n\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n\n    const {\n      bounds\n    } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n\n    if (pswp.options.allowPanToNext && dragAxis === 'x' && axis === 'x' && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX(); // Position of the main scroll relative to the viewport\n\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];\n\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];\n\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0\n          /*&& isRightToLeft*/\n          ) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0\n          /*&& isLeftToRight*/\n          ) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n  } //\n  // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\n\n\n  _getVerticalDragRatio(panY) {\n    return (panY - this.pswp.currSlide.bounds.center.y) / (this.pswp.viewportSize.y / 3);\n  }\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\n\n\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const {\n      pan,\n      bounds\n    } = this.pswp.currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan); // If we are out of pan bounds\n\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n\n}\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\n\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\n\nclass ZoomHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = this.gestures.pswp;\n    /** @type {Point} */\n\n    this._startPan = {};\n    /** @type {Point} */\n\n    this._startZoomPoint = {};\n    /** @type {Point} */\n\n    this._zoomPoint = {};\n  }\n\n  start() {\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\n    this.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n\n  change() {\n    const {\n      p1,\n      startP1,\n      p2,\n      startP2,\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n\n    let currZoomLevel = 1 / getDistanceBetween(startP1, startP2) * getDistanceBetween(p1, p2) * this._startZoomLevel; // slightly over the zoom.fit\n\n\n    if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) {\n      this._wasOverFitZoomLevel = true;\n    }\n\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);\n\n        if (!pswp.dispatch('pinchClose', {\n          bgOpacity\n        }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n  }\n\n  end() {\n    const {\n      pswp\n    } = this;\n    const {\n      currSlide\n    } = pswp;\n\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;\n  }\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\n\n\n  correctZoomPan(ignoreGesture) {\n    const {\n      pswp\n    } = this;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!currSlide.isZoomable()) {\n      return;\n    }\n\n    if (this._zoomPoint.x === undefined) {\n      ignoreGesture = true;\n    }\n\n    const prevZoomLevel = currSlide.currZoomLevel;\n    /** @type {number} */\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial; // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max; // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n    const initialPan = equalizePoints({}, currSlide.pan);\n    let destinationPan = equalizePoints({}, initialPan);\n\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    } // set zoom level, so pan bounds are updated according to it\n\n\n    currSlide.setZoomLevel(destinationZoomLevel);\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    }; // return zoom level and its bounds to initial\n\n    currSlide.setZoomLevel(prevZoomLevel);\n    let panNeedsChange = true;\n\n    if (pointsEqual(destinationPan, initialPan)) {\n      panNeedsChange = false;\n    }\n\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n\n      currSlide.applyCurrentZoomPan(); // nothing to animate\n\n      return;\n    }\n\n    pswp.animations.stopAllPan();\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: now => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n\n          currSlide.applyCurrentZoomPan();\n        } // Restore background opacity\n\n\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n\n}\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\n\n\nfunction didTapOnMainContent(event) {\n  return !!\n  /** @type {HTMLElement} */\n  event.target.closest('.pswp__container');\n}\n/**\r\n * Tap, double-tap handler.\r\n */\n\n\nclass TapHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  click(point, originalEvent) {\n    const targetClassList =\n    /** @type {HTMLElement} */\n    originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item') || targetClassList.contains('pswp__zoom-wrap');\n\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    const actionFullName = actionName + 'Action';\n    const optionValue = pswp.options[actionFullName];\n\n    if (pswp.dispatch(actionFullName, {\n      point,\n      originalEvent\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n\n      case 'zoom':\n        currSlide.toggleZoom(point);\n        break;\n\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n\n        break;\n\n      case 'toggle-controls':\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible'); // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n\n        break;\n    }\n  }\n\n}\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\n\n\nconst AXIS_SWIPE_HYSTERISIS = 10; //const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\n\nconst MIN_TAP_DISTANCE = 25; // px\n\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\n\nclass Gestures {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @type {'x' | 'y'} */\n\n    this.dragAxis = undefined; // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n\n    /** @type {Point} */\n\n    this.p1 = {}; // the first pressed pointer\n\n    /** @type {Point} */\n\n    this.p2 = {}; // the second pressed pointer\n\n    /** @type {Point} */\n\n    this.prevP1 = {};\n    /** @type {Point} */\n\n    this.prevP2 = {};\n    /** @type {Point} */\n\n    this.startP1 = {};\n    /** @type {Point} */\n\n    this.startP2 = {};\n    /** @type {Point} */\n\n    this.velocity = {};\n    /** @type {Point} */\n\n    this._lastStartP1 = {};\n    /** @type {Point} */\n\n    this._intervalP1 = {};\n    this._numActivePoints = 0;\n    /** @type {Point[]} */\n\n    this._ongoingPointers = [];\n    this._touchEventEnabled = 'ontouchstart' in window;\n    this._pointerEventEnabled = !!window.PointerEvent;\n    this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;\n\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\n\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel'); // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n\n\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\n\n\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\n\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\n\n\n  _bindEvents(pref, down, up, cancel) {\n    const {\n      pswp\n    } = this;\n    const {\n      events\n    } = pswp;\n    const cancelEvent = cancel ? pref + cancel : '';\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\n    events.add(window, pref + up, this.onPointerUp.bind(this));\n\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    let isMousePointer;\n\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\n      isMousePointer = true;\n    } // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n\n\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n\n    const {\n      pswp\n    } = this; // if PhotoSwipe is opening or closing\n\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n\n    if (pswp.dispatch('pointerDown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (isMousePointer) {\n      pswp.mouseDetected(); // preventDefault mouse event to prevent\n      // browser image drag feature\n\n      this._preventPointerEventBehaviour(e);\n    }\n\n    pswp.animations.stopAll();\n\n    this._updatePoints(e, 'down');\n\n    this.pointerDown = true;\n\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null; // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n\n      equalizePoints(this.startP1, this.p1);\n    }\n\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerMove(e) {\n    e.preventDefault(); // always preventDefault move event\n\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'move');\n\n    if (this.pswp.dispatch('pointerMove', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      } // Drag axis was detected, emit drag.start\n\n\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n\n        this.isDragging = true;\n\n        this._clearTapTimer(); // Tap can not trigger after drag\n        // Adjust starting point\n\n\n        this._updateStartPoints();\n\n        this._intervalTime = Date.now(); //this._startTime = this._intervalTime;\n\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n\n        this._rafStopLoop();\n\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n\n      this.isZooming = true; // Adjust starting points\n\n      this._updateStartPoints();\n\n      this.zoomLevels.start();\n\n      this._rafStopLoop();\n\n      this._rafRenderLoop();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false; // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'up');\n\n    if (this.pswp.dispatch('pointerUp', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 0) {\n      this.pointerDown = false;\n\n      this._rafStopLoop();\n\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n\n        this._updateStartPoints();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else\n        /* if (this.isZooming) */\n        {\n          if (!pointsEqual(this.p1, this.prevP1) || !pointsEqual(this.p2, this.prevP2)) {\n            this.zoomLevels.change();\n          }\n        }\n\n      this._updatePrevPoints();\n\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\n\n\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n\n    if (duration < 50 && !force) {\n      return;\n    }\n\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _finishTap(e) {\n    const {\n      mainScroll\n    } = this.pswp; // Do not trigger tap events if main scroll is shifted\n\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    } // Do not trigger tap for touchcancel or pointercancel\n\n\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    } // Trigger click instead of tap for mouse events\n\n\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    } // Disable delay if there is no doubleTapAction\n\n\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0; // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n\n    if (this._tapTimer) {\n      this._clearTapTimer(); // Check if two taps were more or less on the same place\n\n\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\n\n\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n\n    return 0;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _preventPointerEventBehaviour(e) {\n    // TODO find a way to disable e.preventDefault on some elements\n    //      via event or some class or something\n    e.preventDefault();\n    return true;\n  }\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      const pointerEvent = e; // Try to find the current pointer in ongoing pointers by its ID\n\n      const pointerIndex = this._ongoingPointers.findIndex(ongoingPoiner => {\n        return ongoingPoiner.id === pointerEvent.pointerId;\n      });\n\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\n      }\n\n      this._numActivePoints = this._ongoingPointers.length; // update points that PhotoSwipe uses\n      // to calculate position and scale\n\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      const touchEvent = e;\n      this._numActivePoints = 0;\n\n      if (touchEvent.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\n\n          this._numActivePoints++;\n\n          if (touchEvent.touches.length > 1) {\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\n\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint(e, this.p1);\n\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  } // update points that were used during previous rAF tick\n\n\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  } // update points at the start of gesture\n\n\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n\n    this._updatePrevPoints();\n  }\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\n\n\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n\n    if ('pointerId' in e) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n\n    return p;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/slide.js').default} Slide */\n\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\n\n\nconst MAIN_SCROLL_END_FRICTION = 0.35; // const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\n\nclass MainScroll {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n    /** @type {number} */\n\n    this.slideWidth = undefined;\n    /** @type {ItemHolder[]} */\n\n    this.itemHolders = undefined;\n    this.resetPosition();\n  }\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\n\n\n  resize(resizeSlides) {\n    const {\n      pswp\n    } = this;\n    const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing); // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n\n    const slideWidthChanged = newSlideWidth !== this.slideWidth;\n\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);\n      }\n\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\n\n\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0; // This will force recalculation of size on next resize()\n\n    this.slideWidth = 0; // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n\n    this._containerShiftIndex = -1;\n  }\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\n\n\n  appendHolders() {\n    this.itemHolders = []; // append our three slide holders -\n    // previous, current, and next\n\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', false, this.pswp.container); // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n      el.style.display = i === 1 ? 'block' : 'none';\n      this.itemHolders.push({\n        el //index: -1\n\n      });\n    }\n  }\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\n\n\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\n\n\n  moveIndexBy(diff, animate, velocityX) {\n    const {\n      pswp\n    } = this;\n    let newIndex = pswp.potentialIndex + diff;\n    const numSlides = pswp.getNumItems();\n\n    if (pswp.canLoop()) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n      const distance = (diff + numSlides) % numSlides;\n\n      if (distance <= numSlides / 2) {\n        // go forward\n        diff = distance;\n      } else {\n        // go backwards\n        diff = distance - numSlides;\n      }\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= numSlides) {\n        newIndex = numSlides - 1;\n      }\n\n      diff = newIndex - pswp.potentialIndex;\n    }\n\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n    pswp.animations.stopMainScroll();\n    const destinationX = this.getCurrSlideX();\n\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1,\n        //0.7,\n        onUpdate: x => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\n\n      if (pswp.canLoop()) {\n        const currDistance = (currDiff + numSlides) % numSlides;\n\n        if (currDistance <= numSlides / 2) {\n          // go forward\n          currDiff = currDistance;\n        } else {\n          // go backwards\n          currDiff = currDistance - numSlides;\n        }\n      } // Force-append new slides during transition\n      // if difference between slides is more than 1\n\n\n      if (Math.abs(currDiff) > 1) {\n        this.updateCurrItem();\n      }\n    }\n\n    if (diff) {\n      return true;\n    }\n  }\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\n\n\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\n\n\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n  /**\r\n   * Update slides X positions and set their content\r\n   */\n\n\n  updateCurrItem() {\n    const {\n      pswp\n    } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n\n    if (!positionDifference) {\n      return;\n    }\n\n    this._prevPositionIndex = this._currPositionIndex;\n    pswp.currIndex = pswp.potentialIndex;\n    let diffAbs = Math.abs(positionDifference);\n    let tempHolder;\n\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3;\n    }\n\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n        this.itemHolders[2] = tempHolder; // move first to last\n\n        this._containerShiftIndex++;\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n        pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i + 2);\n      } else {\n        tempHolder = this.itemHolders.pop();\n        this.itemHolders.unshift(tempHolder); // move last to first\n\n        this._containerShiftIndex--;\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n        pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i - 2);\n      }\n    } // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n\n\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    } // Pan transition might be running (and consntantly updating pan position)\n\n\n    pswp.animations.stopAllPan();\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n    pswp.currSlide = this.itemHolders[1].slide;\n    pswp.contentLoader.updateLazy(positionDifference);\n    pswp.currSlide.applyCurrentZoomPan();\n    pswp.dispatch('change');\n  }\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\n\n\n  moveTo(x, dragging) {\n    /** @type {number} */\n    let newSlideIndexOffset;\n    /** @type {number} */\n\n    let delta;\n\n    if (!this.pswp.canLoop() && dragging) {\n      // Apply friction\n      newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      delta = Math.round(x - this.x);\n\n      if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) {\n        x = this.x + delta * MAIN_SCROLL_END_FRICTION;\n      }\n    }\n\n    this.x = x;\n    setTransform(this.pswp.container, x);\n    this.pswp.dispatch('moveMainScroll', {\n      x,\n      dragging\n    });\n  }\n\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\n\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\n\n\nclass Keyboard {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.on('bindEvents', () => {\n      // Dialog was likely opened by keyboard if initial point is not defined\n      if (!pswp.options.initialPointerPos) {\n        // focus causes layout,\n        // which causes lag during the animation,\n        // that's why we delay it until the opener transition ends\n        this._focusRoot();\n      }\n\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\n    });\n    const lastActiveElement = document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n\n  _focusRoot() {\n    if (!this._wasFocused) {\n      this.pswp.element.focus();\n      this._wasFocused = true;\n    }\n  }\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\n\n\n  _onKeyDown(e) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('keydown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n    /** @type {Methods<PhotoSwipe>} */\n\n\n    let keydownAction;\n    /** @type {'x' | 'y'} */\n\n    let axis;\n    let isForward;\n\n    switch (e.keyCode) {\n      case 27:\n        // esc\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n\n        break;\n\n      case 90:\n        // z key\n        keydownAction = 'toggleZoom';\n        break;\n\n      case 37:\n        // left\n        axis = 'x';\n        break;\n\n      case 38:\n        // top\n        axis = 'y';\n        break;\n\n      case 39:\n        // right\n        axis = 'x';\n        isForward = true;\n        break;\n\n      case 40:\n        // bottom\n        isForward = true;\n        axis = 'y';\n        break;\n\n      case 9:\n        // tab\n        this._focusRoot();\n\n        break;\n    } // if left/right/top/bottom key\n\n\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n      const {\n        currSlide\n      } = pswp;\n\n      if (pswp.options.arrowKeys && axis === 'x' && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n\n    if (keydownAction) {\n      e.preventDefault();\n      pswp[keydownAction]();\n    }\n  }\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\n\n\n  _onFocusIn(e) {\n    const {\n      template\n    } = this.pswp;\n\n    if (document !== e.target && template !== e.target && !template.contains(e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\n\n/**\r\n * Runs CSS transition.\r\n */\n\nclass CSSAnimation {\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\n  constructor(props) {\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      onFinish // opacity\n\n    } = props;\n    let {\n      duration,\n      easing\n    } = props;\n    /** @type {() => void} */\n\n    this.onFinish = onFinish; // support only transform and opacity\n\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = props[prop];\n    /** @private */\n\n    this._target = target;\n    /** @private */\n\n    this._onComplete = onComplete;\n    duration = duration || 333;\n    easing = easing || DEFAULT_EASING;\n    /** @private */\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this); // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transiton won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n\n    /** @private */\n\n    this._helperTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._helperTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false); // Safari occasionally does not emit transitionend event\n        // if element propery was modified during the transition,\n        // which may be caused by resize or third party component,\n        // using timeout as a safety fallback\n\n        this._helperTimeout = setTimeout(() => {\n          this._finalizeAnimation();\n        }, duration + 500);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\n\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._helperTimeout) {\n      clearTimeout(this._helperTimeout);\n    }\n\n    removeTransitionStyle(this._target);\n\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n/**\r\n * Spring easing helper\r\n */\n\nclass SpringEaser {\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n    // https://en.wikipedia.org/wiki/Damping_ratio\n\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO; // https://en.wikipedia.org/wiki/Natural_frequency\n\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency = this._naturalFrequency * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\n\n\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n    let displacement = 0;\n    let coeff;\n    deltaTime /= 1000;\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n      this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n      displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n      this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);\n    } // Overdamped (>1) damping ratio is not supported\n\n\n    return displacement;\n  }\n\n}\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\n\n\nclass SpringAnimation {\n  /**\r\n   * @param {AnimationProps} props\r\n   */\n  constructor(props) {\n    this.props = props;\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish,\n      dampingRatio,\n      naturalFrequency\n    } = props;\n    /** @type {() => void} */\n\n    this.onFinish = onFinish;\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime); // Stop the animation if velocity is low and position is close to end\n\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n\n          if (onComplete) {\n            onComplete();\n          }\n\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n\n    this._raf = requestAnimationFrame(animationLoop);\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n\n    this._raf = null;\n  }\n\n}\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\n\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\n\n/**\r\n * Manages animations\r\n */\n\n\nclass Animations {\n  constructor() {\n    /** @type {Animation[]} */\n    this.activeAnimations = [];\n  }\n  /**\r\n   * @param {AnimationProps} props\r\n   */\n\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n  /**\r\n   * @param {AnimationProps} props\r\n   */\n\n\n  startTransition(props) {\n    this._start(props);\n  }\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\n\n\n  _start(props, isSpring) {\n    /** @type {Animation} */\n    let animation;\n\n    if (isSpring) {\n      animation = new SpringAnimation(props);\n    } else {\n      animation = new CSSAnimation(props);\n    }\n\n    this.activeAnimations.push(animation);\n\n    animation.onFinish = () => this.stop(animation);\n\n    return animation;\n  }\n  /**\r\n   * @param {Animation} animation\r\n   */\n\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n\n  stopAll() {\n    // _stopAllAnimations\n    this.activeAnimations.forEach(animation => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\n\n\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\n\n\n  isPanRunning() {\n    return this.activeAnimations.some(animation => {\n      return animation.props.isPan;\n    });\n  }\n\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\n\n\nclass ScrollWheel {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\n  }\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\n\n\n  _onWheel(e) {\n    e.preventDefault();\n    const {\n      currSlide\n    } = this.pswp;\n    let {\n      deltaX,\n      deltaY\n    } = e;\n\n    if (!currSlide) {\n      return;\n    }\n\n    if (this.pswp.dispatch('wheel', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n\n        zoomFactor = 2 ** zoomFactor;\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n\n        currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);\n      }\n    }\n  }\n\n}\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\n\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\n\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\n\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\n\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\n\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\n\n\nfunction addElementHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">'; // replace all %d with size\n\n  out = out.split('%d').join(svgData.size || 32); // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n\n  out += svgData.inner;\n  out += '</svg>';\n  return out;\n}\n\nclass UIElement {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\n  constructor(pswp, data) {\n    const name = data.name || data.className;\n    let elementHTML = data.html; // @ts-expect-error lookup only by `data.name` maybe?\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    } // Allow to override SVG icons from options\n    // @ts-expect-error lookup only by `data.name` maybe?\n\n\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      // @ts-expect-error lookup only by `data.name` maybe?\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n\n    pswp.dispatch('uiElementCreate', {\n      data\n    });\n    let className = '';\n\n    if (data.isButton) {\n      className += 'pswp__button ';\n      className += data.className || `pswp__button--${data.name}`;\n    } else {\n      className += data.className || `pswp__${data.name}`;\n    }\n    /** @type {HTMLElement} */\n\n\n    let element;\n    let tagName = data.isButton ? data.tagName || 'button' : data.tagName || 'div';\n    tagName = tagName.toLowerCase();\n    element = createElement(className, tagName);\n\n    if (data.isButton) {\n      // create button element\n      element = createElement(className, tagName);\n\n      if (tagName === 'button') {\n        /** @type {HTMLButtonElement} */\n        element.type = 'button';\n      }\n\n      let {\n        title\n      } = data;\n      const {\n        ariaLabel\n      } = data; // @ts-expect-error lookup only by `data.name` maybe?\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        // @ts-expect-error lookup only by `data.name` maybe?\n        title = pswp.options[name + 'Title'];\n      }\n\n      if (title) {\n        element.title = title;\n      }\n\n      if (ariaLabel || title) {\n        /** @type {HTMLElement} */\n        element.setAttribute('aria-label', ariaLabel || title);\n      }\n    }\n\n    element.innerHTML = addElementHTML(elementHTML);\n\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n\n    if (data.onClick) {\n      element.onclick = e => {\n        if (typeof data.onClick === 'string') {\n          pswp[data.onClick]();\n        } else {\n          data.onClick(e, element, pswp);\n        }\n      };\n    } // Top bar is default position\n\n\n    const appendTo = data.appendTo || 'bar';\n    let container;\n\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\n      }\n\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      } else {\n        // root element\n        container = pswp.element;\n      }\n    }\n\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\n  }\n\n}\n/*\r\n  Backward and forward arrow buttons\r\n */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\n\n\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n/** @type {UIElementData} */\n\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  className: 'pswp__button--arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n/** @type {UIElementData} */\n\nconst arrowNext = {\n  name: 'arrowNext',\n  className: 'pswp__button--arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\n\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\n\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\n\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'bar',\n  order: 7,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\n    outlineID: 'pswp__icn-loading'\n  },\n  onInit: (indicatorElement, pswp) => {\n    /** @type {boolean} */\n    let isVisible;\n    /** @type {NodeJS.Timeout} */\n\n    let delayTimeout;\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\n    };\n    /**\r\n     * @param {boolean} visible\r\n     */\n\n\n    const setIndicatorVisibility = visible => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n        toggleIndicatorClass('active', visible);\n      }\n    };\n\n    const updatePreloaderVisibility = () => {\n      if (!pswp.currSlide.content.isLoading()) {\n        setIndicatorVisibility(false);\n\n        if (delayTimeout) {\n          clearTimeout(delayTimeout);\n          delayTimeout = null;\n        }\n\n        return;\n      }\n\n      if (!delayTimeout) {\n        // display loading indicator with delay\n        delayTimeout = setTimeout(() => {\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\n          delayTimeout = null;\n        }, pswp.options.preloaderDelay);\n      }\n    };\n\n    pswp.on('change', updatePreloaderVisibility);\n    pswp.on('loadComplete', e => {\n      if (pswp.currSlide === e.slide) {\n        updatePreloaderVisibility();\n      }\n    }); // expose the method\n\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\n  }\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\n\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();\n    });\n  }\n};\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\n\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\n}\n\nclass UI {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @type {() => void} */\n\n    this.updatePreloaderVisibility = undefined;\n    /** @type {number} */\n\n    this._lastUpdatedZoomLevel = undefined;\n  }\n\n  init() {\n    const {\n      pswp\n    } = this;\n    this.isRegistered = false;\n    /** @type {UIElementData[]} */\n\n    this.uiElementsData = [closeButton, arrowPrev, arrowNext, zoomButton, loadingIndicator, counterIndicator];\n    pswp.dispatch('uiRegister'); // sort by order\n\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n    /** @type {(UIElement | UIElementData)[]} */\n\n    this.items = [];\n    this.isRegistered = true;\n    this.uiElementsData.forEach(uiElementData => {\n      this.registerElement(uiElementData);\n    });\n    pswp.on('change', () => {\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\n    });\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\n\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(new UIElement(this.pswp, elementData));\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\n\n\n  _onZoomPanUpdate() {\n    const {\n      template,\n      currSlide,\n      options\n    } = this.pswp;\n    let {\n      currZoomLevel\n    } = currSlide;\n\n    if (this.pswp.opener.isClosing) {\n      return;\n    } // if not open yet - check against initial zoom level\n\n\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n\n    this._lastUpdatedZoomLevel = currZoomLevel;\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary; // Initial and secondary zoom levels are almost equal\n\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n\n    template.classList.add('pswp--zoom-allowed');\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\n\n    if (options.imageClickAction === 'zoom' || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n\n}\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\n\n/**\r\n * @param {HTMLElement} el\r\n */\n\n\nfunction getBoundsByElement(el) {\n  const thumbAreaRect = el.getBoundingClientRect();\n  return {\n    x: thumbAreaRect.left,\n    y: thumbAreaRect.top,\n    w: thumbAreaRect.width\n  };\n}\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\n\n\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n  const thumbAreaRect = el.getBoundingClientRect(); // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\n\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  }; // Coordinates of inner crop area\n  // relative to the image\n\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n  return bounds;\n}\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\n\n\nfunction getThumbBounds(index, itemData, instance) {\n  // legacy event, before filters were introduced\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  }); // @ts-expect-error\n\n  if (event.thumbBounds) {\n    // @ts-expect-error\n    return event.thumbBounds;\n  }\n\n  const {\n    element\n  } = itemData;\n  let thumbBounds;\n  /** @type {HTMLElement} */\n\n  let thumbnail;\n\n  if (element && instance.options.thumbSelector !== false) {\n    const thumbSelector = instance.options.thumbSelector || 'img';\n    thumbnail = element.matches(thumbSelector) ? element : element.querySelector(thumbSelector);\n  }\n\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\n\n  if (thumbnail) {\n    if (!itemData.thumbCropped) {\n      thumbBounds = getBoundsByElement(thumbnail);\n    } else {\n      thumbBounds = getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w, itemData.height || itemData.h);\n    }\n  }\n\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\n}\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\n\n\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe=} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n\n  addFilter(name, fn, priority = 100) {\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    this._filters[name].push({\n      fn,\n      priority\n    });\n\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\n\n    if (this.pswp) {\n      this.pswp.addFilter(name, fn, priority);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n\n  applyFilters(name, ...args) {\n    if (this._filters[name]) {\n      this._filters[name].forEach(filter => {\n        // @ts-expect-error\n        args[0] = filter.fn.apply(this, args);\n      });\n    }\n\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  on(name, fn) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    this._listeners[name].push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n\n    if (this.pswp) {\n      this.pswp.on(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  off(name, fn) {\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n\n    if (this.pswp) {\n      this.pswp.off(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n\n  dispatch(name, details) {\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event = new PhotoSwipeEvent(name, details);\n\n    if (!this._listeners) {\n      return event;\n    }\n\n    if (this._listeners[name]) {\n      this._listeners[name].forEach(listener => {\n        listener.call(this, event);\n      });\n    }\n\n    return event;\n  }\n\n}\n\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : '', container);\n\n    if (imageSrc) {\n      /** @type {HTMLImageElement} */\n      this.element.decoding = 'async';\n      /** @type {HTMLImageElement} */\n\n      this.element.alt = '';\n      /** @type {HTMLImageElement} */\n\n      this.element.src = imageSrc;\n      this.element.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hiden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    if (this.element.parentNode) {\n      this.element.remove();\n    }\n\n    this.element = null;\n  }\n\n}\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement} */\n\n    this.element = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = null;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\n\n\n  load(isLazy, reload) {\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\n      // use   -based placeholder only for the first slide,\n      // as rendering (even small stretched thumbnail) is an expensive operation\n      const placeholderSrc = this.instance.applyFilters('placeholderSrc', this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n      this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n    }\n\n    if (this.element && !reload) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content');\n      this.element.innerHTML = this.data.html || '';\n    }\n\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n\n  loadImage(isLazy) {\n    const imageElement = this.element;\n\n    if (this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.updateSrcsetSizes();\n\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n\n    imageElement.src = this.data.src;\n    imageElement.alt = this.data.alt || '';\n    this.state = LOAD_STATE.LOADING;\n\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    } // eslint-disable-next-line max-len\n\n\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n\n    setWidthHeight(this.element, width, height);\n\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n\n      if (this.slide) {\n        // eslint-disable-next-line max-len\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (this.data.srcset) {\n      const image = this.element;\n      const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n\n      if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n        image.sizes = sizesWidth + 'px';\n        image.dataset.largestUsedSize = String(sizesWidth);\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = null;\n\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.remove();\n\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = null;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n\n  displayError() {\n    if (this.slide) {\n      /** @type {HTMLElement} */\n      let errorMsgEl = createElement('pswp__error-msg');\n      errorMsgEl.innerText = this.instance.options.errorMsg;\n      errorMsgEl = this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n\n  append() {\n    if (this.isAttached) {\n      return;\n    }\n\n    this.isAttached = true;\n\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    const supportsDecode = ('decode' in this.element);\n\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.slide) {\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\n        // add image to slide when it becomes active,\n        // even if it's not finished decoding\n        this.appendImage();\n      } else if (this.isError()) {\n        this.load(false, true); // try to reload\n      }\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n\n  remove() {\n    this.isAttached = false;\n\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n\n}\n/** @typedef {import('./content.js').default} Content */\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n\nconst MIN_SLIDES_TO_CACHE = 5;\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  // src/slide/content/content.js\n  const content = instance.createContentFromData(itemData, index);\n\n  if (!content || !content.lazyLoad) {\n    return;\n  }\n\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset and we need to define sizes\n  // @ts-expect-error should provide pswp instance?\n\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\n  zoomLevel.update(content.width, content.height, panAreaSize);\n  content.lazyLoad();\n  content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\n\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\nclass ContentLoader {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp; // Total amount of cached images\n\n    this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, MIN_SLIDES_TO_CACHE);\n    /** @type {Content[]} */\n\n    this._cachedItems = [];\n  }\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\n\n\n  updateLazy(diff) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n\n    const {\n      preload\n    } = pswp.options;\n    const isForward = diff === undefined ? true : diff >= 0;\n    let i; // preload[1] - num items to preload in forward direction\n\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : -i));\n    } // preload[0] - num items to preload in backward direction\n\n\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? -i : i));\n    }\n  }\n  /**\r\n   * @param {number} index\r\n   */\n\n\n  loadSlideByIndex(index) {\n    index = this.pswp.getLoopedIndex(index); // try to get cached content\n\n    let content = this.getContentByIndex(index);\n\n    if (!content) {\n      // no cached content, so try to load from scratch:\n      content = lazyLoadSlide(index, this.pswp); // if content can be loaded, add it to cache:\n\n      if (content) {\n        this.addToCache(content);\n      }\n    }\n  }\n  /**\r\n   * @param {Slide} slide\r\n   */\n\n\n  getContentBySlide(slide) {\n    let content = this.getContentByIndex(slide.index);\n\n    if (!content) {\n      // create content if not found in cache\n      content = this.pswp.createContentFromData(slide.data, slide.index);\n\n      if (content) {\n        this.addToCache(content);\n      }\n    }\n\n    if (content) {\n      // assign slide to content\n      content.setSlide(slide);\n    }\n\n    return content;\n  }\n  /**\r\n   * @param {Content} content\r\n   */\n\n\n  addToCache(content) {\n    // move to the end of array\n    this.removeByIndex(content.index);\n\n    this._cachedItems.push(content);\n\n    if (this._cachedItems.length > this.limit) {\n      // Destroy the first content that's not attached\n      const indexToRemove = this._cachedItems.findIndex(item => {\n        return !item.isAttached && !item.hasSlide;\n      });\n\n      if (indexToRemove !== -1) {\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n\n        removedItem.destroy();\n      }\n    }\n  }\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\n\n\n  removeByIndex(index) {\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\n\n    if (indexToRemove !== -1) {\n      this._cachedItems.splice(indexToRemove, 1);\n    }\n  }\n  /**\r\n   * @param {number} index\r\n   */\n\n\n  getContentByIndex(index) {\n    return this._cachedItems.find(content => content.index === index);\n  }\n\n  destroy() {\n    this._cachedItems.forEach(content => content.destroy());\n\n    this._cachedItems = null;\n  }\n\n}\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    let numItems;\n    const {\n      dataSource\n    } = this.options;\n\n    if (!dataSource) {\n      numItems = 0;\n    } else if ('length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if ('gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\n\n\n  createContentFromData(slideData, index) {\n    // @ts-expect-error\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\n\n\n  getItemData(index) {\n    const {\n      dataSource\n    } = this.options;\n    let dataSourceItem;\n\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && dataSource.gallery) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\n\n\n  _getGalleryDOMElements(galleryElement) {\n    if (this.options.children || this.options.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    }; // eslint-disable-next-line max-len\n\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10); // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = thumbnailEl.getAttribute('alt');\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\n\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\n\n\nconst MIN_OPACITY = 0.003;\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\n\nclass Opener {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this._prepareOpen = this._prepareOpen.bind(this);\n    /** @type {false | Bounds} */\n\n    this._thumbBounds = undefined; // Override initial zoom and pan position\n\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n\n  open() {\n    this._prepareOpen();\n\n    this._start();\n  }\n\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return false;\n    }\n\n    const slide = this.pswp.currSlide;\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\n      this._duration = 0;\n    }\n\n    this._applyStartProps();\n\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n    return true;\n  }\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n\n    if (!this.isOpening) {\n      const slide = this.pswp.currSlide;\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\n        this._duration = 0;\n      }\n\n      this._applyStartProps();\n    }\n  }\n\n  _applyStartProps() {\n    const {\n      pswp\n    } = this;\n    const slide = this.pswp.currSlide;\n    const {\n      options\n    } = pswp;\n\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = false;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = false;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n\n    this._placeholder = slide.getPlaceholderElement();\n    pswp.animations.stopAll(); // Discard animations when duration is less than 50ms\n\n    this._useAnimation = this._duration > 50;\n    this._animateZoom = Boolean(this._thumbBounds) && slide.content && slide.content.usePlaceholder() && (!this.isClosing || !pswp.mainScroll.isShifted());\n\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      this._animateRootOpacity = options.showHideOpacity;\n    }\n\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\n\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        pswp.element.style.opacity = String(MIN_OPACITY);\n        pswp.applyBgOpacity(1);\n      }\n\n      return;\n    }\n\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\n      pswp.container.style.overflow = 'hidden';\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\n    } else {\n      this._croppedZoom = false;\n    }\n\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateRootOpacity) {\n        pswp.element.style.opacity = String(MIN_OPACITY);\n        pswp.applyBgOpacity(1);\n      } else {\n        if (this._animateBgOpacity) {\n          pswp.bg.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.element.style.opacity = '1';\n      }\n\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.style.willChange = 'transform'; // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n\n          this._placeholder.style.opacity = String(MIN_OPACITY);\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n\n  _start() {\n    if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise(resolve => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage(this._placeholder).finally(() => {\n          decoded = true;\n\n          if (!isDelaying) {\n            resolve();\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n\n          if (decoded) {\n            resolve();\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n\n  _initiate() {\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n    this.pswp.dispatch(this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'); // legacy event\n\n    this.pswp.dispatch('initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\n\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = '1';\n      }\n\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n\n  _onAnimationComplete() {\n    const {\n      pswp\n    } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n    pswp.dispatch(this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'); // legacy event\n\n    pswp.dispatch('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      if (this._animateZoom) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n  }\n\n  _animateToOpenState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      if (this._croppedZoom) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n\n      pswp.currSlide.zoomAndPanToInitial();\n\n      this._animateTo(pswp.currSlide.container, 'transform', pswp.currSlide.getCurrentTransform());\n    }\n\n    if (this._animateBgOpacity) {\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\n    }\n\n    if (this._animateRootOpacity) {\n      this._animateTo(pswp.element, 'opacity', '1');\n    }\n  }\n\n  _animateToClosedState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    }\n\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01) {\n      // do not animate opacity if it's already at 0\n      this._animateTo(pswp.bg, 'opacity', '0');\n    }\n\n    if (this._animateRootOpacity) {\n      this._animateTo(pswp.element, 'opacity', '0');\n    }\n  }\n  /**\r\n   * @param {boolean=} animate\r\n   */\n\n\n  _setClosedStateZoomPan(animate) {\n    if (!this._thumbBounds) return;\n    const {\n      pswp\n    } = this;\n    const {\n      innerRect\n    } = this._thumbBounds;\n    const {\n      currSlide,\n      viewportSize\n    } = pswp;\n\n    if (this._croppedZoom) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n\n      if (animate) {\n        this._animateTo(this._cropContainer1, 'transform', toTransformString(containerOnePanX, containerOnePanY));\n\n        this._animateTo(this._cropContainer2, 'transform', toTransformString(containerTwoPanX, containerTwoPanY));\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n\n    if (animate) {\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n    } else {\n      currSlide.applyCurrentZoomPan();\n    }\n  }\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\n\n\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n\n    const {\n      animations\n    } = this.pswp;\n    /** @type {AnimationProps} */\n\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n\n}\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\n\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\n\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\n\n/** @typedef {{ x?: number; y?: number }} Size */\n\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\n\n/** @typedef {SlideData[]} DataSourceArray */\n\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\n\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\n\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\n\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\n\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\n\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\n\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\n\n/** @type {PhotoSwipeOptions} */\n\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  returnFocus: true,\n  maxWidthToAnimate: 4000,\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n  indexIndicatorSep: ' / ',\n  preloaderDelay: 2000,\n  bgOpacity: 0.8,\n  index: 0,\n  errorMsg: 'The image cannot be loaded',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n/**\r\n * PhotoSwipe Core\r\n */\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\n  constructor(options) {\n    super();\n\n    this._prepareOptions(options);\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\n\n\n    this.offset = {};\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\n\n    this._prevViewportSize = {};\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\n\n    this.viewportSize = {};\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.bgOpacity = 1;\n    /** @type {HTMLDivElement} */\n\n    this.topBar = undefined;\n    this.events = new DOMEvents();\n    /** @type {Animations} */\n\n    this.animations = new Animations();\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.contentLoader = new ContentLoader(this);\n  }\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isOpen = true;\n    this.dispatch('init'); // legacy\n\n    this.dispatch('beforeOpen');\n\n    this._createMainStructure(); // add classes to the root element of PhotoSwipe\n\n\n    let rootClasses = 'pswp--open';\n\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n\n    this.element.className += ' ' + rootClasses;\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n    // initialize scroll wheel handler to block the scroll\n\n    this.scrollWheel = new ScrollWheel(this); // sanitize index\n\n    if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    } // causes forced synchronous layout\n\n\n    this.updateSize();\n    this.offset.y = window.pageYOffset;\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', {\n      index: this.currIndex,\n      data: this._initialItemData,\n      slide: undefined\n    }); // *Layout* - calculate size and position of elements here\n\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n    this.on('openingAnimationEnd', () => {\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\n      this.mainScroll.itemHolders[2].el.style.display = 'block'; // Add content to the previous and next slide\n\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\n      this.appendHeavy();\n      this.contentLoader.updateLazy();\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    }); // set content for center slide (first time)\n\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    this.dispatch('change');\n    this.opener.open();\n    this.dispatch('afterInit');\n    return true;\n  }\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\n\n\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n\n    index = clamp(index, 0, numSlides - 1);\n    return index;\n  }\n\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      if (itemHolder.slide) {\n        itemHolder.slide.appendHeavy();\n      }\n    });\n  }\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\n\n\n  goTo(index) {\n    this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);\n  }\n  /**\r\n   * Go to the next slide.\r\n   */\n\n\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n  /**\r\n   * Go to the previous slide.\r\n   */\n\n\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\n\n\n  zoomTo(...args) {\n    this.currSlide.zoomTo(...args);\n  }\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\n\n\n  toggleZoom() {\n    this.currSlide.toggleZoom();\n  }\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\n\n\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isDestroying = true;\n    this.dispatch('close');\n    this.events.removeAll();\n    this.opener.close();\n  }\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\n\n\n  destroy() {\n    if (!this.isDestroying) {\n      this.options.showHideAnimationType = 'none';\n      this.close();\n      return;\n    }\n\n    this.dispatch('destroy');\n    this.listeners = null;\n    this.scrollWrap.ontouchmove = null;\n    this.scrollWrap.ontouchend = null;\n    this.element.remove();\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      if (itemHolder.slide) {\n        itemHolder.slide.destroy();\n      }\n    });\n    this.contentLoader.destroy();\n    this.events.removeAll();\n  }\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\n\n\n  refreshSlideContent(slideIndex) {\n    this.contentLoader.removeByIndex(slideIndex);\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\n\n      if (this.canLoop()) {\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\n      }\n\n      if (potentialHolderIndex === slideIndex) {\n        // set the new slide content\n        this.setContent(itemHolder, slideIndex, true); // activate the new slide if it's current\n\n        if (i === 1) {\n          /** @type {Slide} */\n          this.currSlide = itemHolder.slide;\n          itemHolder.slide.setIsActive(true);\n        }\n      }\n    });\n    this.dispatch('change');\n  }\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\n\n\n  setContent(holder, index, force) {\n    if (this.canLoop()) {\n      index = this.getLoopedIndex(index);\n    }\n\n    if (holder.slide) {\n      if (holder.slide.index === index && !force) {\n        // exit if holder already contains this slide\n        // this could be common when just three slides are used\n        return;\n      } // destroy previous slide\n\n\n      holder.slide.destroy();\n      holder.slide = null;\n    } // exit if no loop and index is out of bounds\n\n\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\n      return;\n    }\n\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this); // set current slide\n\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n\n    holder.slide.append(holder.el);\n  }\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\n\n\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    } //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n\n    const newViewportSize = getViewportSize(this.options, this);\n\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    } //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n\n\n    equalizePoints(this._prevViewportSize, newViewportSize);\n    this.dispatch('beforeResize');\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n\n    this._updatePageScrollOffset();\n\n    this.dispatch('viewportSize'); // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n\n    this.mainScroll.resize(this.opener.isOpen);\n\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n\n    this.dispatch('resize');\n  }\n  /**\r\n   * @param {number} opacity\r\n   */\n\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\n  }\n  /**\r\n   * Whether mouse is detected\r\n   */\n\n\n  mouseDetected() {\n    if (!this.hasMouse) {\n      this.hasMouse = true;\n      this.element.classList.add('pswp--has_mouse');\n    }\n  }\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\n\n\n  _handlePageResize() {\n    this.updateSize(); // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\n\n\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\n\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\n\n\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.element = createElement('pswp');\n    this.element.setAttribute('tabindex', '-1');\n    this.element.setAttribute('role', 'dialog'); // template is legacy prop\n\n    this.template = this.element; // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n\n    this.bg = createElement('pswp__bg', false, this.element);\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\n    this.container = createElement('pswp__container', false, this.scrollWrap);\n    this.mainScroll.appendHolders();\n    this.ui = new UI(this);\n    this.ui.init(); // append to DOM\n\n    (this.options.appendToEl || document.body).appendChild(this.element);\n  }\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\n\n\n  getThumbBounds() {\n    return getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);\n  }\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\n\n\n  canLoop() {\n    return this.options.loop && this.getNumItems() > 2;\n  }\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\n\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n    /** @type {PhotoSwipeOptions}*/\n\n\n    this.options = { ...defaultOptions,\n      ...options\n    };\n  }\n\n}\n\nexport { PhotoSwipe as default };","map":{"version":3,"sources":["../../../src/js/util/util.js","../../../src/js/util/dom-events.js","../../../src/js/util/viewport-size.js","../../../src/js/slide/pan-bounds.js","../../../src/js/slide/zoom-level.js","../../../src/js/slide/slide.js","../../../src/js/gestures/drag-handler.js","../../../src/js/gestures/zoom-handler.js","../../../src/js/gestures/tap-handler.js","../../../src/js/gestures/gestures.js","../../../src/js/main-scroll.js","../../../src/js/keyboard.js","../../../src/js/util/css-animation.js","../../../src/js/util/spring-easer.js","../../../src/js/util/spring-animation.js","../../../src/js/util/animations.js","../../../src/js/scroll-wheel.js","../../../src/js/ui/ui-element.js","../../../src/js/ui/button-arrow.js","../../../src/js/ui/button-close.js","../../../src/js/ui/button-zoom.js","../../../src/js/ui/loading-indicator.js","../../../src/js/ui/counter-indicator.js","../../../src/js/ui/ui.js","../../../src/js/slide/get-thumb-bounds.js","../../../src/js/core/eventable.js","../../../src/js/slide/placeholder.js","../../../src/js/slide/content.js","../../../src/js/slide/loader.js","../../../src/js/core/base.js","../../../src/js/opener.js","../../../src/js/photoswipe.js"],"names":[],"mappings":";;;;;AAAA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,aAAT,CAAuB,SAAvB,EAAkC,OAAlC,EAA2C,UAA3C,EAAuD;AAC5D,QAAM,EAAE,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAO,IAAI,KAAlC,CAAX;;AACA,MAAI,SAAJ,EAAe;AACb,IAAA,EAAE,CAAC,SAAH,GAAe,SAAf;AACD;;AACD,MAAI,UAAJ,EAAgB;AACd,IAAA,UAAU,CAAC,WAAX,CAAuB,EAAvB;AACD,GAP2D,CAQ9D;;;AACE,SAAO,EAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAAS,cAAT,CAAwB,EAAxB,EAA4B,EAA5B,EAAgC;AACrC,EAAA,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAV;AACA,EAAA,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAV;;AACA,MAAI,EAAE,CAAC,EAAH,KAAU,SAAd,EAAyB;AACvB,IAAA,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAAX;AACD;;AACD,SAAO,EAAP;AACD;AAED;AACA;AACA;;;AACO,SAAS,UAAT,CAAoB,CAApB,EAAuB;AAC5B,EAAA,CAAC,CAAC,CAAF,GAAM,IAAI,CAAC,KAAL,CAAW,CAAC,CAAC,CAAb,CAAN;AACA,EAAA,CAAC,CAAC,CAAF,GAAM,IAAI,CAAC,KAAL,CAAW,CAAC,CAAC,CAAb,CAAN;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,kBAAT,CAA4B,EAA5B,EAAgC,EAAhC,EAAoC;AACzC,QAAM,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAnB,CAAV;AACA,QAAM,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAnB,CAAV;AACA,SAAO,IAAI,CAAC,IAAL,CAAW,CAAC,GAAG,CAAL,GAAW,CAAC,GAAG,CAAzB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,WAAT,CAAqB,EAArB,EAAyB,EAAzB,EAA6B;AAClC,SAAO,EAAE,CAAC,CAAH,KAAS,EAAE,CAAC,CAAZ,IAAiB,EAAE,CAAC,CAAH,KAAS,EAAE,CAAC,CAApC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B;AACnC,SAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,GAAd,CAAT,EAA6B,GAA7B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,iBAAT,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,EAAwC;AAC7C,MAAI,SAAS,GAAG,iBACZ,CADY,GACR,KADQ,IACC,CAAC,IAAI,CADN,IACW,IADX,GAEZ,KAFJ;;AAIA,MAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,IAAA,SAAS,IAAI,cACT,KADS,GACD,GADC,GACK,KADL,GAET,KAFJ;AAGD;;AAED,SAAO,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,YAAT,CAAsB,EAAtB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,KAAhC,EAAuC;AAC5C,EAAA,EAAE,CAAC,KAAH,CAAS,SAAT,GAAqB,iBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,CAAtC;AACD;;AAED,MAAM,gBAAgB,GAAG,0BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS,kBAAT,CAA4B,EAA5B,EAAgC,IAAhC,EAAsC,QAAtC,EAAgD,IAAhD,EAAsD;AAC7D;AACA;AACA;AACE,EAAA,EAAE,CAAC,KAAH,CAAS,UAAT,GAAsB,IAAI,GACrB,IAAI,GAAG,GAAP,GAAa,QAAb,GAAwB,KAAxB,IAAiC,IAAI,IAAI,gBAAzC,CADqB,GAEtB,MAFJ;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,cAAT,CAAwB,EAAxB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC;AACvC,EAAA,EAAE,CAAC,KAAH,CAAS,KAAT,GAAkB,OAAO,CAAP,KAAa,QAAd,GAA2B,CAAC,GAAG,IAA/B,GAAuC,CAAxD;AACA,EAAA,EAAE,CAAC,KAAH,CAAS,MAAT,GAAmB,OAAO,CAAP,KAAa,QAAd,GAA2B,CAAC,GAAG,IAA/B,GAAuC,CAAzD;AACD;AAED;AACA;AACA;;;AACO,SAAS,qBAAT,CAA+B,EAA/B,EAAmC;AACxC,EAAA,kBAAkB,CAAC,EAAD,CAAlB;AACD;AAED;AACA;AACA;AACA;;;AACO,SAAS,WAAT,CAAqB,GAArB,EAA0B;AAC/B,MAAI,YAAY,GAAhB,EAAqB;AACnB,WAAO,GAAG,CAAC,MAAJ,EAAP;AACD;;AAED,MAAI,GAAG,CAAC,QAAR,EAAkB;AAChB,WAAO,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAP;AACD;;AAED,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACtC,IAAA,GAAG,CAAC,MAAJ,GAAa,MAAM,OAAO,CAAC,GAAD,CAA1B;;AACA,IAAA,GAAG,CAAC,OAAJ,GAAc,MAAd;AACD,GAHM,CAAP;AAID;AAED;;AACA;;;AACO,MAAM,UAAU,GAAG;AACxB,EAAA,IAAI,EAAE,MADkB;AAExB,EAAA,OAAO,EAAE,SAFe;AAGxB,EAAA,MAAM,EAAE,QAHgB;AAIxB,EAAA,KAAK,EAAE;AAJiB,CAAnB;AAQP;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS,cAAT,CAAwB,CAAxB,EAA2B;AAChC,MAAI,CAAC,CAAC,KAAF,KAAY,CAAZ,IAAiB,CAAC,CAAC,OAAnB,IAA8B,CAAC,CAAC,OAAhC,IAA2C,CAAC,CAAC,MAA7C,IAAuD,CAAC,CAAC,QAA7D,EAAuE;AACrE,WAAO,IAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,qBAAT,CAA+B,MAA/B,EAAuC,cAAvC,EAAuD,MAAM,GAAG,QAAhE,EAA0E;AACjF;AACE,MAAI,QAAQ,GAAG,EAAf;;AAEA,MAAI,MAAM,YAAY,OAAtB,EAA+B;AAC7B,IAAA,QAAQ,GAAG,CAAC,MAAD,CAAX;AACD,GAFD,MAEO,IAAI,MAAM,YAAY,QAAlB,IAA8B,KAAK,CAAC,OAAN,CAAc,MAAd,CAAlC,EAAyD;AAC9D,IAAA,QAAQ,GAAG,KAAK,CAAC,IAAN,CAAW,MAAX,CAAX;AACD,GAFM,MAEA;AACL,UAAM,QAAQ,GAAG,OAAO,MAAP,KAAkB,QAAlB,GAA6B,MAA7B,GAAsC,cAAvD;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,GAAG,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,gBAAP,CAAwB,QAAxB,CAAX,CAAX;AACD;AACF;;AAED,SAAO,QAAP;AACD;AAaD;AACA;AACA;AACA;AACA;;;AACO,SAAS,QAAT,GAAoB;AACzB,SAAO,CAAC,EAAE,SAAS,CAAC,MAAV,IAAoB,SAAS,CAAC,MAAV,CAAiB,KAAjB,CAAuB,QAAvB,CAAtB,CAAR;AACF,C,CC3OA;;;AACA,IAAI,eAAe,GAAG,KAAtB;AACA;;AACA,IAAI;AACF,EAAA,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,IAAhC,EAAsC,MAAM,CAAC,cAAP,CAAsB,EAAtB,EAA0B,SAA1B,EAAqC;AACzE,IAAA,GAAG,EAAE,MAAM;AACT,MAAA,eAAe,GAAG,IAAlB;AACD;AAHwE,GAArC,CAAtC;AAKD,CAND,CAME,OAAO,CAAP,EAAU,CAAE;AACd;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAM,SAAN,CAAgB;AACd,EAAA,WAAW,GAAG;AAChB;AACA;AACA;AACA;AACI,SAAK,KAAL,GAAa,EAAb;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,GAAG,CAAC,MAAD,EAAS,IAAT,EAAe,QAAf,EAAyB,OAAzB,EAAkC;AACnC,SAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EAAmC,QAAnC,EAA6C,OAA7C;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,MAAD,EAAS,IAAT,EAAe,QAAf,EAAyB,OAAzB,EAAkC;AACtC,SAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EAAmC,QAAnC,EAA6C,OAA7C,EAAsD,IAAtD;AACD;AAEH;AACA;AACA;;;AACE,EAAA,SAAS,GAAG;AACV,SAAK,KAAL,CAAW,OAAX,CAAoB,QAAD,IAAc;AAC/B,WAAK,eAAL,CACE,QAAQ,CAAC,MADX,EAEE,QAAQ,CAAC,IAFX,EAGE,QAAQ,CAAC,QAHX,EAIE,QAAQ,CAAC,OAJX,EAKE,IALF,EAME,IANF;AAQD,KATD;;AAUA,SAAK,KAAL,GAAa,EAAb;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,eAAe,CAAC,MAAD,EAAS,IAAT,EAAe,QAAf,EAAyB,OAAzB,EAAkC,MAAlC,EAA0C,QAA1C,EAAoD;AACjE,QAAI,CAAC,MAAL,EAAa;AACX;AACD;;AAED,UAAM,UAAU,GAAG,MAAM,GAAG,qBAAH,GAA2B,kBAApD;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd;AACA,IAAA,KAAK,CAAC,OAAN,CAAe,KAAD,IAAW;AACvB,UAAI,KAAJ,EAAW;AACjB;AACA;AACQ,YAAI,CAAC,QAAL,EAAe;AACb,cAAI,MAAJ,EAAY;AACtB;AACY,iBAAK,KAAL,GAAa,KAAK,KAAL,CAAW,MAAX,CAAmB,QAAD,IAAc;AAC3C,qBAAO,QAAQ,CAAC,IAAT,KAAkB,KAAlB,IACF,QAAQ,CAAC,QAAT,KAAsB,QADpB,IAEF,QAAQ,CAAC,MAAT,KAAoB,MAFzB;AAGD,aAJY,CAAb;AAKD,WAPD,MAOO;AACjB;AACY,iBAAK,KAAL,CAAW,IAAX,CAAgB;AACd,cAAA,MADc;AAEd,cAAA,IAAI,EAAE,KAFQ;AAGd,cAAA,QAHc;AAId,cAAA;AAJc,aAAhB;AAMD;AACF,SApBQ,CAuBjB;AACA;;;AACQ,cAAM,YAAY,GAAG,eAAe,GAAG;AAAE,UAAA,OAAO,EAAG,OAAO,IAAI;AAAvB,SAAH,GAAqC,KAAzE;AAEA,QAAA,MAAM,CAAC,UAAD,CAAN,CACE,KADF,EAEE,QAFF,EAGE,YAHF;AAKD;AACF,KAlCD;AAmCD;;AAtGa;ACrBhB;;AACA;;AACA;;AAEA;AACA;AACA;AACA;;;AACO,SAAS,eAAT,CAAyB,OAAzB,EAAkC,IAAlC,EAAwC;AAC7C,MAAI,OAAO,CAAC,iBAAZ,EAA+B;AAC7B,UAAM,eAAe,GAAG,OAAO,CAAC,iBAAR,CAA0B,OAA1B,EAAmC,IAAnC,CAAxB;;AACA,QAAI,eAAJ,EAAqB;AACnB,aAAO,eAAP;AACD;AACF;;AAED,SAAO;AACL,IAAA,CAAC,EAAE,QAAQ,CAAC,eAAT,CAAyB,WADvB;AAGT;AACA;AACA;AACA;AACI,IAAA,CAAC,EAAE,MAAM,CAAC;AAPL,GAAP;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,kBAAT,CAA4B,IAA5B,EAAkC,OAAlC,EAA2C,YAA3C,EAAyD,QAAzD,EAAmE,KAAnE,EAA0E;AACjF;AACE,MAAI,YAAJ;;AAEA,MAAI,OAAO,CAAC,SAAZ,EAAuB;AACrB,IAAA,YAAY,GAAG,OAAO,CAAC,SAAR,CAAkB,YAAlB,EAAgC,QAAhC,EAA0C,KAA1C,EAAiD,IAAjD,CAAf;AACD,GAFD,MAEO,IAAI,OAAO,CAAC,OAAZ,EAAqB;AAC1B,IAAA,YAAY,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAf;AACD,GAFM,MAEA;AACL,UAAM,cAAc,GAAG,YAAY,IAAI,CAAC,CAAD,CAAJ,CAAQ,WAAR,EAAZ,GAAoC,IAAI,CAAC,KAAL,CAAW,CAAX,CAA3D,CADK,CAET;;AACI,QAAI,OAAO,CAAC,cAAD,CAAX,EAA6B;AACjC;AACM,MAAA,YAAY,GAAG,OAAO,CAAC,cAAD,CAAtB;AACD;AACF;;AAED,SAAO,YAAY,IAAI,CAAvB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,cAAT,CAAwB,OAAxB,EAAiC,YAAjC,EAA+C,QAA/C,EAAyD,KAAzD,EAAgE;AACrE,SAAO;AACL,IAAA,CAAC,EAAE,YAAY,CAAC,CAAb,GACC,kBAAkB,CAAC,MAAD,EAAS,OAAT,EAAkB,YAAlB,EAAgC,QAAhC,EAA0C,KAA1C,CADnB,GAEC,kBAAkB,CAAC,OAAD,EAAU,OAAV,EAAmB,YAAnB,EAAiC,QAAjC,EAA2C,KAA3C,CAHjB;AAIL,IAAA,CAAC,EAAE,YAAY,CAAC,CAAb,GACC,kBAAkB,CAAC,KAAD,EAAQ,OAAR,EAAiB,YAAjB,EAA+B,QAA/B,EAAyC,KAAzC,CADnB,GAEC,kBAAkB,CAAC,QAAD,EAAW,OAAX,EAAoB,YAApB,EAAkC,QAAlC,EAA4C,KAA5C;AANjB,GAAP;AAQF;AC5FA;;AACA;;AACA;;AAEA;AACA;AACA;;;AACA,MAAM,SAAN,CAAgB;AAChB;AACA;AACA;AACE,EAAA,WAAW,CAAC,KAAD,EAAQ;AACjB,SAAK,KAAL,GAAa,KAAb;AAEA,SAAK,aAAL,GAAqB,CAArB;AAEJ;;AACI,SAAK,MAAL,GAAc,EAAd;AACJ;;AACI,SAAK,GAAL,GAAW,EAAX;AACJ;;AACI,SAAK,GAAL,GAAW,EAAX;AAEA,SAAK,KAAL;AACD;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,aAAD,EAAgB;AACpB,SAAK,aAAL,GAAqB,aAArB;;AAEA,QAAI,CAAC,KAAK,KAAL,CAAW,KAAhB,EAAuB;AACrB,WAAK,KAAL;AACD,KAFD,MAEO;AACL,WAAK,WAAL,CAAiB,GAAjB;;AACA,WAAK,WAAL,CAAiB,GAAjB;;AACA,WAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,CAAyB,YAAzB,EAAuC;AAAE,QAAA,KAAK,EAAE,KAAK;AAAd,OAAvC;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,WAAW,CAAC,IAAD,EAAO;AAChB,UAAM;AAAE,MAAA;AAAF,QAAW,KAAK,KAAtB;AACA,UAAM,MAAM,GAAG,KAAK,KAAL,CAAW,IAAI,KAAK,GAAT,GAAe,OAAf,GAAyB,QAApC,IAAgD,KAAK,aAApE;AACA,UAAM,WAAW,GAAG,IAAI,KAAK,GAAT,GAAe,MAAf,GAAwB,KAA5C;AACA,UAAM,OAAO,GAAG,kBAAkB,CAChC,WADgC,EAEhC,IAAI,CAAC,OAF2B,EAGhC,IAAI,CAAC,YAH2B,EAIhC,KAAK,KAAL,CAAW,IAJqB,EAKhC,KAAK,KAAL,CAAW,KALqB,CAAlC;AAQA,UAAM,WAAW,GAAG,KAAK,KAAL,CAAW,WAAX,CAAuB,IAAvB,CAApB,CAZgB,CAcpB;AACA;;AACI,SAAK,MAAL,CAAY,IAAZ,IAAoB,IAAI,CAAC,KAAL,CAAW,CAAC,WAAW,GAAG,MAAf,IAAyB,CAApC,IAAyC,OAA7D,CAhBgB,CAkBpB;;AACI,SAAK,GAAL,CAAS,IAAT,IAAkB,MAAM,GAAG,WAAV,GACb,IAAI,CAAC,KAAL,CAAW,WAAW,GAAG,MAAzB,IAAmC,OADtB,GAEb,KAAK,MAAL,CAAY,IAAZ,CAFJ,CAnBgB,CAuBpB;;AACI,SAAK,GAAL,CAAS,IAAT,IAAkB,MAAM,GAAG,WAAV,GACb,OADa,GAEb,KAAK,MAAL,CAAY,IAAZ,CAFJ;AAGD,GApEa,CAsEhB;;;AACE,EAAA,KAAK,GAAG;AACN,SAAK,MAAL,CAAY,CAAZ,GAAgB,CAAhB;AACA,SAAK,MAAL,CAAY,CAAZ,GAAgB,CAAhB;AACA,SAAK,GAAL,CAAS,CAAT,GAAa,CAAb;AACA,SAAK,GAAL,CAAS,CAAT,GAAa,CAAb;AACA,SAAK,GAAL,CAAS,CAAT,GAAa,CAAb;AACA,SAAK,GAAL,CAAS,CAAT,GAAa,CAAb;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,UAAU,CAAC,IAAD,EAAO,SAAP,EAAkB;AAAA;AAC1B,WAAO,KAAK,CAAC,SAAD,EAAY,KAAK,GAAL,CAAS,IAAT,CAAZ,EAA4B,KAAK,GAAL,CAAS,IAAT,CAA5B,CAAZ;AACD;;AAxFa;;ACZhB,MAAM,eAAe,GAAG,IAAxB;AAEA;;AACA;;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AACA,MAAM,SAAN,CAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,WAAW,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2B,IAA3B,EAAiC;AAC1C,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,KAAL,GAAa,KAAb;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC;AACvC,SAAK,WAAL,GAAmB;AACjB,MAAA,CAAC,EAAE,QADc;AAEjB,MAAA,CAAC,EAAE;AAFc,KAAnB;AAKA,SAAK,WAAL,GAAmB,WAAnB;AAEA,UAAM,MAAM,GAAG,KAAK,WAAL,CAAiB,CAAjB,GAAqB,KAAK,WAAL,CAAiB,CAArD;AACA,UAAM,MAAM,GAAG,KAAK,WAAL,CAAiB,CAAjB,GAAqB,KAAK,WAAL,CAAiB,CAArD;AAEA,SAAK,GAAL,GAAW,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,MAAM,GAAG,MAAT,GAAkB,MAAlB,GAA2B,MAAvC,CAAX;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,MAAM,GAAG,MAAT,GAAkB,MAAlB,GAA2B,MAAvC,CAAZ,CAZuC,CAc3C;AACA;;AACI,SAAK,KAAL,GAAa,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,MAAZ,CAAb;AAEA,SAAK,OAAL,GAAe,KAAK,WAAL,EAAf;AACA,SAAK,SAAL,GAAiB,KAAK,aAAL,EAAjB;AACA,SAAK,GAAL,GAAW,IAAI,CAAC,GAAL,CACT,KAAK,OADI,EAET,KAAK,SAFI,EAGT,KAAK,OAAL,EAHS,CAAX;AAMA,SAAK,GAAL,GAAW,IAAI,CAAC,GAAL,CACT,KAAK,GADI,EAET,KAAK,OAFI,EAGT,KAAK,SAHI,CAAX;;AAMA,QAAI,KAAK,IAAT,EAAe;AACb,WAAK,IAAL,CAAU,QAAV,CAAmB,kBAAnB,EAAuC;AAAE,QAAA,UAAU,EAAE,IAAd;AAAoB,QAAA,SAAS,EAAE,KAAK;AAApC,OAAvC;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,qBAAqB,CAAC,YAAD,EAAe;AACtC;AACI,UAAM,UAAU,GAA8E,YAAY,GAAG,WAA7G;AACA,UAAM,WAAW,GAAG,KAAK,OAAL,CAAa,UAAb,CAApB;;AAEA,QAAI,CAAC,WAAL,EAAkB;AAChB;AACD;;AAED,QAAI,OAAO,WAAP,KAAuB,UAA3B,EAAuC;AACrC,aAAO,WAAW,CAAC,IAAD,CAAlB;AACD;;AAED,QAAI,WAAW,KAAK,MAApB,EAA4B;AAC1B,aAAO,KAAK,IAAZ;AACD;;AAED,QAAI,WAAW,KAAK,KAApB,EAA2B;AACzB,aAAO,KAAK,GAAZ;AACD;;AAED,WAAO,MAAM,CAAC,WAAD,CAAb;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,aAAa,GAAG;AACd,QAAI,aAAa,GAAG,KAAK,qBAAL,CAA2B,WAA3B,CAApB;;AAEA,QAAI,aAAJ,EAAmB;AACjB,aAAO,aAAP;AACD,KALa,CAOlB;;;AACI,IAAA,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAK,GAAL,GAAW,CAAvB,CAAhB;;AAEA,QAAI,aAAa,GAAG,KAAK,WAAL,CAAiB,CAAjC,GAAqC,eAAzC,EAA0D;AACxD,MAAA,aAAa,GAAG,eAAe,GAAG,KAAK,WAAL,CAAiB,CAAnD;AACD;;AAED,WAAO,aAAP;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,WAAW,GAAG;AACZ,WAAO,KAAK,qBAAL,CAA2B,SAA3B,KAAyC,KAAK,GAArD;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,OAAO,GAAG;AACR,UAAM,aAAa,GAAG,KAAK,qBAAL,CAA2B,KAA3B,CAAtB;;AAEA,QAAI,aAAJ,EAAmB;AACjB,aAAO,aAAP;AACD,KALO,CAOZ;AACA;;;AACI,WAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAK,GAAL,GAAW,CAAvB,CAAP;AACD;;AAhJa;ACZhB;;AAiCA;AACA;AACA;;;AACA,MAAM,KAAN,CAAY;AACZ;AACA;AACA;AACA;AACA;AACE,EAAA,WAAW,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB;AAC7B,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,QAAL,GAAiB,KAAK,KAAK,IAAI,CAAC,SAAhC;AACA,SAAK,iBAAL,GAAyB,CAAzB;AACJ;;AACI,SAAK,WAAL,GAAmB,EAAnB;AAEA,SAAK,YAAL,GAAqB,KAAK,QAAL,IAAiB,CAAC,IAAI,CAAC,MAAL,CAAY,MAAnD;AAEA,SAAK,UAAL,GAAkB,IAAI,SAAJ,CAAc,IAAI,CAAC,OAAnB,EAA4B,IAA5B,EAAkC,KAAlC,EAAyC,IAAzC,CAAlB;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,aAAnB,EAAkC;AAChC,MAAA,KAAK,EAAE,IADyB;AAEhC,MAAA,IAAI,EAAE,KAAK,IAFqB;AAGhC,MAAA;AAHgC,KAAlC;AAMA,SAAK,GAAL,GAAW;AACT,MAAA,CAAC,EAAE,CADM;AAET,MAAA,CAAC,EAAE;AAFM,KAAX;AAKA,SAAK,OAAL,GAAe,KAAK,IAAL,CAAU,aAAV,CAAwB,iBAAxB,CAA0C,IAA1C,CAAf;AACA,SAAK,SAAL,GAAiB,aAAa,CAAC,iBAAD,CAA9B;AAEA,SAAK,aAAL,GAAqB,CAArB;AACJ;;AACI,SAAK,KAAL,GAAa,KAAK,OAAL,CAAa,KAA1B;AACJ;;AACI,SAAK,MAAL,GAAc,KAAK,OAAL,CAAa,MAA3B;AAEA,SAAK,MAAL,GAAc,IAAI,SAAJ,CAAc,IAAd,CAAd;AAEA,SAAK,kBAAL,GAA0B,CAAC,CAA3B;AACA,SAAK,mBAAL,GAA2B,CAAC,CAA5B;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,WAAnB,EAAgC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAhC;AACD;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,WAAW,CAAC,QAAD,EAAW;AACpB,QAAI,QAAQ,IAAI,CAAC,KAAK,QAAtB,EAAgC;AACpC;AACM,WAAK,QAAL;AACD,KAHD,MAGO,IAAI,CAAC,QAAD,IAAa,KAAK,QAAtB,EAAgC;AAC3C;AACM,WAAK,UAAL;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,aAAD,EAAgB;AACpB,SAAK,aAAL,GAAqB,aAArB;AAEA,SAAK,SAAL,CAAe,KAAf,CAAqB,eAArB,GAAuC,KAAvC,CAHoB,CAKxB;;AACI,QAAI,CAAC,KAAK,IAAV,EAAgB;AACd;AACD;;AAED,SAAK,aAAL;AAEA,SAAK,IAAL;AACA,SAAK,iBAAL;AACA,SAAK,WAAL;AAEA,SAAK,aAAL,CAAmB,WAAnB,CAA+B,KAAK,SAApC;AAEA,SAAK,mBAAL;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,cAAnB,EAAmC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAnC;AAEA,SAAK,mBAAL;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,iBAAnB,EAAsC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAtC;;AAEA,QAAI,KAAK,QAAT,EAAmB;AACjB,WAAK,QAAL;AACD;AACF;;AAED,EAAA,IAAI,GAAG;AACL,SAAK,OAAL,CAAa,IAAb;AACA,SAAK,IAAL,CAAU,QAAV,CAAmB,WAAnB,EAAgC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAhC;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,WAAW,GAAG;AACZ,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,UAAM,iBAAiB,GAAG,IAA1B,CAFY,CAEmB;AAEnC;;AACI,QAAI,KAAK,aAAL,IACG,CAAC,IAAI,CAAC,MAAL,CAAY,MADhB,IAEG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAFH,IAGI,CAAC,KAAK,QAAN,IAAkB,CAAC,iBAH3B,EAG+C;AAC7C;AACD;;AAED,QAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,aAAnB,EAAkC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAlC,EAAmD,gBAAvD,EAAyE;AACvE;AACD;;AAED,SAAK,aAAL,GAAqB,IAArB;AAEA,SAAK,OAAL,CAAa,MAAb;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,oBAAnB,EAAyC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAzC;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,QAAQ,GAAG;AACT,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,WAAL;AACA,SAAK,OAAL,CAAa,QAAb;AACA,SAAK,IAAL,CAAU,QAAV,CAAmB,eAAnB,EAAoC;AAAE,MAAA,KAAK,EAAE;AAAT,KAApC;AACD;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,UAAU,GAAG;AACX,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,OAAL,CAAa,UAAb;;AAEA,QAAI,KAAK,aAAL,KAAuB,KAAK,UAAL,CAAgB,OAA3C,EAAoD;AACxD;AACM,WAAK,aAAL;AACD,KAPU,CASf;;;AACI,SAAK,iBAAL,GAAyB,CAAzB;AACA,SAAK,mBAAL;AACA,SAAK,mBAAL;AACA,SAAK,iBAAL;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,iBAAnB,EAAsC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAtC;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,OAAO,GAAG;AACR,SAAK,OAAL,CAAa,QAAb,GAAwB,KAAxB;AACA,SAAK,OAAL,CAAa,MAAb;AACA,SAAK,SAAL,CAAe,MAAf;AACA,SAAK,IAAL,CAAU,QAAV,CAAmB,cAAnB,EAAmC;AAAE,MAAA,KAAK,EAAE;AAAT,KAAnC;AACD;;AAED,EAAA,MAAM,GAAG;AACP,QAAI,KAAK,aAAL,KAAuB,KAAK,UAAL,CAAgB,OAAvC,IAAkD,CAAC,KAAK,QAA5D,EAAsE;AAC1E;AACA;AAEA;AACM,WAAK,aAAL;AACA,WAAK,iBAAL,GAAyB,CAAzB;AACA,WAAK,mBAAL;AACA,WAAK,mBAAL;AACA,WAAK,iBAAL;AACD,KAVD,MAUO;AACX;AACM,WAAK,aAAL;AACA,WAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,aAAxB;AACA,WAAK,KAAL,CAAW,KAAK,GAAL,CAAS,CAApB,EAAuB,KAAK,GAAL,CAAS,CAAhC;AACD;AACF;AAGH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,iBAAiB,CAAC,KAAD,EAAQ;AAC3B;AACA;AACI,UAAM,eAAe,GAAG,KAAK,iBAAL,IAA0B,KAAK,UAAL,CAAgB,OAAlE;;AAEA,QAAI,CAAC,eAAL,EAAsB;AACpB;AACD;;AAED,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,KAAL,GAAa,eAAxB,KAA4C,KAAK,IAAL,CAAU,YAAV,CAAuB,CAAjF;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,MAAL,GAAc,eAAzB,KAA6C,KAAK,IAAL,CAAU,YAAV,CAAuB,CAAnF;;AAEA,QAAI,CAAC,KAAK,WAAL,CAAiB,KAAjB,EAAwB,MAAxB,CAAD,IAAoC,CAAC,KAAzC,EAAgD;AAC9C;AACD;;AACD,SAAK,OAAL,CAAa,gBAAb,CAA8B,KAA9B,EAAqC,MAArC;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,WAAW,CAAC,KAAD,EAAQ,MAAR,EAAgB;AACzB,QAAI,KAAK,KAAK,KAAK,kBAAf,IACG,MAAM,KAAK,KAAK,mBADvB,EAC4C;AAC1C,WAAK,kBAAL,GAA0B,KAA1B;AACA,WAAK,mBAAL,GAA2B,MAA3B;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED,EAAA,qBAAqB,GAAG;AACtB,QAAI,KAAK,OAAL,CAAa,WAAjB,EAA8B;AAC5B,aAAO,KAAK,OAAL,CAAa,WAAb,CAAyB,OAAhC;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,aAAD,EAAgB,WAAhB,EAA6B,kBAA7B,EAAiD,YAAjD,EAA+D;AACnE,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;;AACA,QAAI,CAAC,KAAK,UAAL,EAAD,IACG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADP,EACoC;AAClC;AACD;;AAED,IAAA,IAAI,CAAC,QAAL,CAAc,cAAd,EAA8B;AAC5B,MAAA,aAD4B;AACb,MAAA,WADa;AACA,MAAA;AADA,KAA9B,EAPmE,CAWvE;;AACI,IAAA,IAAI,CAAC,UAAL,CAAgB,UAAhB,GAZmE,CAcvE;AACA;AACA;;AAEI,UAAM,aAAa,GAAG,KAAK,aAA3B;;AAEA,QAAI,CAAC,YAAL,EAAmB;AACjB,MAAA,aAAa,GAAG,KAAK,CAAC,aAAD,EAAgB,KAAK,UAAL,CAAgB,GAAhC,EAAqC,KAAK,UAAL,CAAgB,GAArD,CAArB;AACD,KAtBkE,CAwBvE;AACA;AACA;;;AAEI,SAAK,YAAL,CAAkB,aAAlB;AACA,SAAK,GAAL,CAAS,CAAT,GAAa,KAAK,wBAAL,CAA8B,GAA9B,EAAmC,WAAnC,EAAgD,aAAhD,CAAb;AACA,SAAK,GAAL,CAAS,CAAT,GAAa,KAAK,wBAAL,CAA8B,GAA9B,EAAmC,WAAnC,EAAgD,aAAhD,CAAb;AACA,IAAA,UAAU,CAAC,KAAK,GAAN,CAAV;;AAEA,UAAM,gBAAgB,GAAG,MAAM;AAC7B,WAAK,cAAL,CAAoB,aAApB;;AACA,WAAK,mBAAL;AACD,KAHD;;AAKA,QAAI,CAAC,kBAAL,EAAyB;AACvB,MAAA,gBAAgB;AACjB,KAFD,MAEO;AACL,MAAA,IAAI,CAAC,UAAL,CAAgB,eAAhB,CAAgC;AAC9B,QAAA,KAAK,EAAE,IADuB;AAE9B,QAAA,IAAI,EAAE,QAFwB;AAG9B,QAAA,MAAM,EAAE,KAAK,SAHiB;AAI9B,QAAA,SAAS,EAAE,KAAK,mBAAL,EAJmB;AAK9B,QAAA,UAAU,EAAE,gBALkB;AAM9B,QAAA,QAAQ,EAAE,kBANoB;AAO9B,QAAA,MAAM,EAAE,IAAI,CAAC,OAAL,CAAa;AAPS,OAAhC;AASD;AACF;AAEH;AACA;AACA;;;AACE,EAAA,UAAU,CAAC,WAAD,EAAc;AACtB,SAAK,MAAL,CACE,KAAK,aAAL,KAAuB,KAAK,UAAL,CAAgB,OAAvC,GACI,KAAK,UAAL,CAAgB,SADpB,GACgC,KAAK,UAAL,CAAgB,OAFlD,EAGE,WAHF,EAIE,KAAK,IAAL,CAAU,OAAV,CAAkB,qBAJpB;AAMD;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,YAAY,CAAC,aAAD,EAAgB;AAC1B,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,aAAxB;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,wBAAwB,CAAC,IAAD,EAAO,KAAP,EAAc,aAAd,EAA6B;AACnD,UAAM,gBAAgB,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,IAAwB,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAjD;;AACA,QAAI,gBAAgB,KAAK,CAAzB,EAA4B;AAC1B,aAAO,KAAK,MAAL,CAAY,MAAZ,CAAmB,IAAnB,CAAP;AACD;;AAED,QAAI,CAAC,KAAL,EAAY;AACV,MAAA,KAAK,GAAG,KAAK,IAAL,CAAU,sBAAV,EAAR;AACD;;AAED,UAAM,UAAU,GAAG,KAAK,aAAL,GAAqB,aAAxC;AACA,WAAO,KAAK,MAAL,CAAY,UAAZ,CACL,IADK,EAEL,CAAC,KAAK,GAAL,CAAS,IAAT,IAAiB,KAAK,CAAC,IAAD,CAAvB,IAAiC,UAAjC,GAA8C,KAAK,CAAC,IAAD,CAF9C,CAAP;AAID;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,KAAK,CAAC,IAAD,EAAO,IAAP,EAAa;AAChB,SAAK,GAAL,CAAS,CAAT,GAAa,KAAK,MAAL,CAAY,UAAZ,CAAuB,GAAvB,EAA4B,IAA5B,CAAb;AACA,SAAK,GAAL,CAAS,CAAT,GAAa,KAAK,MAAL,CAAY,UAAZ,CAAuB,GAAvB,EAA4B,IAA5B,CAAb;AACA,SAAK,mBAAL;AACD;AAEH;AACA;AACA;;;AACE,EAAA,UAAU,GAAG;AACX,WAAO,KAAK,KAAL,IAAe,KAAK,aAAL,GAAqB,KAAK,UAAL,CAAgB,GAA3D;AACD;AAEH;AACA;AACA;;;AACE,EAAA,UAAU,GAAG;AACX,WAAO,KAAK,KAAL,IAAc,KAAK,OAAL,CAAa,UAAb,EAArB;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,mBAAmB,GAAG;AACpB,SAAK,mBAAL,CAAyB,KAAK,GAAL,CAAS,CAAlC,EAAqC,KAAK,GAAL,CAAS,CAA9C,EAAiD,KAAK,aAAtD;;AACA,QAAI,SAAS,KAAK,IAAL,CAAU,SAAvB,EAAkC;AAChC,WAAK,IAAL,CAAU,QAAV,CAAmB,eAAnB,EAAoC;AAAE,QAAA,KAAK,EAAE;AAAT,OAApC;AACD;AACF;;AAED,EAAA,mBAAmB,GAAG;AACpB,SAAK,aAAL,GAAqB,KAAK,UAAL,CAAgB,OAArC,CADoB,CAGxB;;AACI,SAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,aAAxB;AACA,IAAA,cAAc,CAAC,KAAK,GAAN,EAAW,KAAK,MAAL,CAAY,MAAvB,CAAd;AACA,SAAK,IAAL,CAAU,QAAV,CAAmB,gBAAnB,EAAqC;AAAE,MAAA,KAAK,EAAE;AAAT,KAArC;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,mBAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,IAAP,EAAa;AAC9B,IAAA,IAAI,IAAI,KAAK,iBAAL,IAA0B,KAAK,UAAL,CAAgB,OAAlD;AACA,IAAA,YAAY,CAAC,KAAK,SAAN,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,IAAvB,CAAZ;AACD;;AAED,EAAA,aAAa,GAAG;AACd,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AAEA,IAAA,cAAc,CACZ,KAAK,WADO,EAEZ,cAAc,CAAC,IAAI,CAAC,OAAN,EAAe,IAAI,CAAC,YAApB,EAAkC,KAAK,IAAvC,EAA6C,KAAK,KAAlD,CAFF,CAAd;AAKA,SAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAK,KAA5B,EAAmC,KAAK,MAAxC,EAAgD,KAAK,WAArD;AAEA,IAAA,IAAI,CAAC,QAAL,CAAc,eAAd,EAA+B;AAC7B,MAAA,KAAK,EAAE;AADsB,KAA/B;AAGD;;AAED,EAAA,mBAAmB,GAAG;AACpB,UAAM,KAAK,GAAG,KAAK,aAAL,IAAsB,KAAK,iBAAL,IAA0B,KAAK,UAAL,CAAgB,OAAhE,CAAd;AACA,WAAO,iBAAiB,CAAC,KAAK,GAAL,CAAS,CAAV,EAAa,KAAK,GAAL,CAAS,CAAtB,EAAyB,KAAzB,CAAxB;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,cAAc,CAAC,aAAD,EAAgB;AAC5B,QAAI,aAAa,KAAK,KAAK,iBAA3B,EAA8C;AAC5C;AACD;;AAED,SAAK,iBAAL,GAAyB,aAAzB;AACA,SAAK,iBAAL;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,mBAAnB;AACD;;AA7cS;AChCZ;;AACA;;;AAEA,MAAM,gBAAgB,GAAG,IAAzB;AACA,MAAM,sBAAsB,GAAG,GAA/B,C,CAEA;;AACA,MAAM,kBAAkB,GAAG,GAA3B,C,CAEA;AACA;;AACA,MAAM,oBAAoB,GAAG,GAA7B;AAEA;AACA;AACA;AACA;;AACA,SAAS,OAAT,CAAiB,eAAjB,EAAkC,gBAAlC,EAAoD;AAClD,SAAO,eAAe,GAAG,gBAAlB,IAAsC,IAAI,gBAA1C,CAAP;AACD;AAED;AACA;AACA;;;AACA,MAAM,WAAN,CAAkB;AAClB;AACA;AACA;AACE,EAAA,WAAW,CAAC,QAAD,EAAW;AACpB,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,IAArB;AACJ;;AACI,SAAK,QAAL,GAAgB,EAAhB;AACD;;AAED,EAAA,KAAK,GAAG;AACN,IAAA,cAAc,CAAC,KAAK,QAAN,EAAgB,KAAK,IAAL,CAAU,SAAV,CAAoB,GAApC,CAAd;AACA,SAAK,IAAL,CAAU,UAAV,CAAqB,OAArB;AACD;;AAED,EAAA,MAAM,GAAG;AACP,UAAM;AAAE,MAAA,EAAF;AAAM,MAAA,MAAN;AAAc,MAAA,QAAd;AAAwB,MAAA;AAAxB,QAAiC,KAAK,QAA5C;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,IAAtB;;AAEA,QAAI,QAAQ,KAAK,GAAb,IACG,IAAI,CAAC,OAAL,CAAa,mBADhB,IAEG,SAAS,CAAC,aAAV,IAA2B,SAAS,CAAC,UAAV,CAAqB,GAFnD,IAGG,CAAC,KAAK,QAAL,CAAc,YAHtB,EAGoC;AACxC;AACM,YAAM,IAAI,GAAG,SAAS,CAAC,GAAV,CAAc,CAAd,IAAmB,EAAE,CAAC,CAAH,GAAO,MAAM,CAAC,CAAjC,CAAb;;AACA,UAAI,CAAC,IAAI,CAAC,QAAL,CAAc,cAAd,EAA8B;AAAE,QAAA;AAAF,OAA9B,EAAwC,gBAA7C,EAA+D;AAC7D,aAAK,mBAAL,CAAyB,GAAzB,EAA8B,IAA9B,EAAoC,sBAApC;;AACA,cAAM,SAAS,GAAG,IAAI,IAAI,CAAC,GAAL,CAAS,KAAK,qBAAL,CAA2B,SAAS,CAAC,GAAV,CAAc,CAAzC,CAAT,CAAtB;AACA,QAAA,IAAI,CAAC,cAAL,CAAoB,SAApB;AACA,QAAA,SAAS,CAAC,mBAAV;AACD;AACF,KAZD,MAYO;AACL,YAAM,iBAAiB,GAAG,KAAK,oBAAL,CAA0B,GAA1B,CAA1B;;AACA,UAAI,CAAC,iBAAL,EAAwB;AACtB,aAAK,oBAAL,CAA0B,GAA1B;;AAEA,QAAA,UAAU,CAAC,SAAS,CAAC,GAAX,CAAV;AACA,QAAA,SAAS,CAAC,mBAAV;AACD;AACF;AACF;;AAED,EAAA,GAAG,GAAG;AACJ,UAAM;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,QAAqB,KAAK,QAAhC;AACA,UAAM;AAAE,MAAA;AAAF,QAAiB,IAAvB;AACA,QAAI,SAAS,GAAG,CAAhB;AAEA,IAAA,IAAI,CAAC,UAAL,CAAgB,OAAhB,GALI,CAOR;;AACI,QAAI,UAAU,CAAC,SAAX,EAAJ,EAA4B;AAChC;AACM,YAAM,mBAAmB,GAAG,UAAU,CAAC,CAAX,GAAe,UAAU,CAAC,aAAX,EAA3C,CAF0B,CAIhC;AACA;AACA;AACA;;AACM,YAAM,2BAA2B,GAAI,mBAAmB,GAAG,IAAI,CAAC,YAAL,CAAkB,CAA7E,CAR0B,CAUhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACM,UAAK,QAAQ,CAAC,CAAT,GAAa,CAAC,oBAAd,IAAsC,2BAA2B,GAAG,CAArE,IACI,QAAQ,CAAC,CAAT,GAAa,GAAb,IAAoB,2BAA2B,GAAG,CAAC,GAD3D,EACiE;AACvE;AACQ,QAAA,SAAS,GAAG,CAAZ;AACA,QAAA,QAAQ,CAAC,CAAT,GAAa,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,CAAlB,EAAqB,CAArB,CAAb;AACD,OALD,MAKO,IAAK,QAAQ,CAAC,CAAT,GAAa,oBAAb,IAAqC,2BAA2B,GAAG,CAApE,IACH,QAAQ,CAAC,CAAT,GAAa,CAAC,GAAd,IAAqB,2BAA2B,GAAG,GADpD,EAC0D;AACvE;AACQ,QAAA,SAAS,GAAG,CAAC,CAAb;AACA,QAAA,QAAQ,CAAC,CAAT,GAAa,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,CAAlB,EAAqB,CAArB,CAAb;AACD;;AAED,MAAA,UAAU,CAAC,WAAX,CAAuB,SAAvB,EAAkC,IAAlC,EAAwC,QAAQ,CAAC,CAAjD;AACD,KAvCG,CAyCR;;;AACI,QAAI,IAAI,CAAC,SAAL,CAAe,aAAf,GAA+B,IAAI,CAAC,SAAL,CAAe,UAAf,CAA0B,GAAzD,IACG,KAAK,QAAL,CAAc,YADrB,EACmC;AACjC,WAAK,QAAL,CAAc,UAAd,CAAyB,cAAzB,CAAwC,IAAxC;AACD,KAHD,MAGO;AACX;AACA;AACA;AACA;AACM,WAAK,wBAAL,CAA8B,GAA9B;;AACA,WAAK,wBAAL,CAA8B,GAA9B;AACD;AACF;AAEH;AACA;AACA;AACA;;;AACE,EAAA,wBAAwB,CAAC,IAAD,EAAO;AAC7B,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,IAAtB;AACA,UAAM;AAAE,MAAA;AAAF,QAAe,KAAK,QAA1B;AACA,UAAM;AAAE,MAAA,GAAF;AAAO,MAAA;AAAP,QAAkB,SAAxB;AACA,UAAM,MAAM,GAAG,GAAG,CAAC,IAAD,CAAlB;AACA,UAAM,gBAAgB,GAAI,IAAI,CAAC,SAAL,GAAiB,CAAjB,IAAsB,IAAI,KAAK,GAAzD,CAN6B,CAQjC;AACA;;AACI,UAAM,gBAAgB,GAAG,KAAzB,CAV6B,CAUE;AAEnC;;AACI,UAAM,iBAAiB,GAAG,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAD,CAAT,EAAiB,gBAAjB,CAA1C;;AAEA,QAAI,gBAAJ,EAAsB;AACpB,YAAM,UAAU,GAAG,KAAK,qBAAL,CAA2B,MAA3B,CAAnB;;AACA,YAAM,mBAAmB,GAAG,KAAK,qBAAL,CAA2B,iBAA3B,CAA5B,CAFoB,CAI1B;AACA;;;AACM,UAAK,UAAU,GAAG,CAAb,IAAkB,mBAAmB,GAAG,CAAC,kBAA1C,IACI,UAAU,GAAG,CAAb,IAAkB,mBAAmB,GAAG,kBADhD,EACqE;AACnE,QAAA,IAAI,CAAC,KAAL;AACA;AACD;AACF,KA1B4B,CA4BjC;;;AACI,UAAM,oBAAoB,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,EAAwB,iBAAxB,CAA7B,CA7B6B,CA+BjC;AACA;;AACI,QAAI,MAAM,KAAK,oBAAf,EAAqC;AACnC;AACD,KAnC4B,CAqCjC;;;AACI,UAAM,YAAY,GAAI,oBAAoB,KAAK,iBAA1B,GAA+C,CAA/C,GAAmD,IAAxE;AAEA,UAAM,gBAAgB,GAAG,IAAI,CAAC,SAA9B;AACA,UAAM,YAAY,GAAG,oBAAoB,GAAG,MAA5C;AAEA,IAAA,IAAI,CAAC,UAAL,CAAgB,WAAhB,CAA4B;AAC1B,MAAA,IAAI,EAAE,eAAe,IADK;AAE1B,MAAA,KAAK,EAAE,IAFmB;AAG1B,MAAA,KAAK,EAAE,MAHmB;AAI1B,MAAA,GAAG,EAAE,oBAJqB;AAK1B,MAAA,QAAQ,EAAE,QAAQ,CAAC,IAAD,CALQ;AAM1B,MAAA,YAN0B;AAO1B,MAAA,QAAQ,EAAG,GAAD,IAAS;AACzB;AACQ,YAAI,gBAAgB,IAAI,IAAI,CAAC,SAAL,GAAiB,CAAzC,EAA4C;AACpD;AACU,gBAAM,sBAAsB,GAAG,IAAI,CAAC,oBAAoB,GAAG,GAAxB,IAA+B,YAAlE,CAF0C,CAIpD;AACA;AACA;;AACU,UAAA,IAAI,CAAC,cAAL,CAAoB,KAAK,CACvB,gBAAgB,GAAG,CAAC,IAAI,gBAAL,IAAyB,sBADrB,EAEvB,CAFuB,EAGvB,CAHuB,CAAzB;AAKD;;AAED,QAAA,GAAG,CAAC,IAAD,CAAH,GAAY,IAAI,CAAC,KAAL,CAAW,GAAX,CAAZ;AACA,QAAA,SAAS,CAAC,mBAAV;AACD;AAzByB,KAA5B;AA2BD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,oBAAoB,CAAC,IAAD,EAAO;AACzB,UAAM;AAAE,MAAA,EAAF;AAAM,MAAA,IAAN;AAAY,MAAA,QAAZ;AAAsB,MAAA,MAAtB;AAA8B,MAAA;AAA9B,QAA+C,KAAK,QAA1D;AACA,UAAM;AAAE,MAAA,SAAF;AAAa,MAAA;AAAb,QAA4B,IAAlC;AACA,UAAM,KAAK,GAAI,EAAE,CAAC,IAAD,CAAF,GAAW,MAAM,CAAC,IAAD,CAAhC;AACA,UAAM,cAAc,GAAG,UAAU,CAAC,CAAX,GAAe,KAAtC;;AAEA,QAAI,CAAC,KAAL,EAAY;AACV;AACD,KARwB,CAU7B;;;AACI,QAAI,IAAI,KAAK,GAAT,IAAgB,CAAC,SAAS,CAAC,UAAV,EAAjB,IAA2C,CAAC,YAAhD,EAA8D;AAC5D,MAAA,UAAU,CAAC,MAAX,CAAkB,cAAlB,EAAkC,IAAlC;AACA,aAAO,IAAP,CAF4D,CAEhD;AACb;;AAED,UAAM;AAAE,MAAA;AAAF,QAAa,SAAnB;AACA,UAAM,MAAM,GAAG,SAAS,CAAC,GAAV,CAAc,IAAd,IAAsB,KAArC;;AAEA,QAAI,IAAI,CAAC,OAAL,CAAa,cAAb,IACG,QAAQ,KAAK,GADhB,IAEG,IAAI,KAAK,GAFZ,IAGG,CAAC,YAHR,EAGsB;AACpB,YAAM,oBAAoB,GAAG,UAAU,CAAC,aAAX,EAA7B,CADoB,CAG1B;;AACM,YAAM,mBAAmB,GAAG,UAAU,CAAC,CAAX,GAAe,oBAA3C;AAEA,YAAM,aAAa,GAAG,KAAK,GAAG,CAA9B;AACA,YAAM,aAAa,GAAG,CAAC,aAAvB;;AAEA,UAAI,MAAM,GAAG,MAAM,CAAC,GAAP,CAAW,IAAX,CAAT,IAA6B,aAAjC,EAAgD;AACtD;AAEA;AACA;AACA;AACQ,cAAM,mBAAmB,GAAI,MAAM,CAAC,GAAP,CAAW,IAAX,KAAoB,KAAK,QAAL,CAAc,IAAd,CAAjD;;AAEA,YAAI,mBAAJ,EAAyB;AACvB,UAAA,UAAU,CAAC,MAAX,CAAkB,cAAlB,EAAkC,IAAlC;AACA,iBAAO,IAAP;AACD,SAHD,MAGO;AACL,eAAK,mBAAL,CAAyB,IAAzB,EAA+B,MAA/B,EADK,CAEf;;AACS;AACF,OAfD,MAeO,IAAI,MAAM,GAAG,MAAM,CAAC,GAAP,CAAW,IAAX,CAAT,IAA6B,aAAjC,EAAgD;AAC7D;AAEA;AACQ,cAAM,mBAAmB,GAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,MAAM,CAAC,GAAP,CAAW,IAAX,CAApD;;AAEA,YAAI,mBAAJ,EAAyB;AACvB,UAAA,UAAU,CAAC,MAAX,CAAkB,cAAlB,EAAkC,IAAlC;AACA,iBAAO,IAAP;AACD,SAHD,MAGO;AACL,eAAK,mBAAL,CAAyB,IAAzB,EAA+B,MAA/B,EADK,CAEf;;AACS;AACF,OAbM,MAaA;AACb;AACQ,YAAI,mBAAmB,KAAK,CAA5B,EAA+B;AACvC;AACU,cAAI,mBAAmB,GAAG;AAAC;AAA3B,YAAkD;AAChD,YAAA,UAAU,CAAC,MAAX,CAAkB,IAAI,CAAC,GAAL,CAAS,cAAT,EAAyB,oBAAzB,CAAlB,EAAkE,IAAlE;AACA,mBAAO,IAAP;AACD,WAHD,MAGO,IAAI,mBAAmB,GAAG;AAAC;AAA3B,YAAkD;AACnE;AACY,YAAA,UAAU,CAAC,MAAX,CAAkB,IAAI,CAAC,GAAL,CAAS,cAAT,EAAyB,oBAAzB,CAAlB,EAAkE,IAAlE;AACA,mBAAO,IAAP;AACD;AACF,SAVD,MAUO;AACf;AACU,eAAK,mBAAL,CAAyB,IAAzB,EAA+B,MAA/B;AACD;AACF;AACF,KAzDD,MAyDO;AACL,UAAI,IAAI,KAAK,GAAb,EAAkB;AACxB;AACQ,YAAI,CAAC,UAAU,CAAC,SAAX,EAAD,IAA2B,MAAM,CAAC,GAAP,CAAW,CAAX,KAAiB,MAAM,CAAC,GAAP,CAAW,CAA3D,EAA8D;AAC5D,eAAK,mBAAL,CAAyB,IAAzB,EAA+B,MAA/B;AACD;AACF,OALD,MAKO;AACL,aAAK,mBAAL,CAAyB,IAAzB,EAA+B,MAA/B;AACD;AACF;AACF,GA7Qe,CA8QlB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,qBAAqB,CAAC,IAAD,EAAO;AAC1B,WAAO,CAAC,IAAI,GAAG,KAAK,IAAL,CAAU,SAAV,CAAoB,MAApB,CAA2B,MAA3B,CAAkC,CAA1C,KACI,KAAK,IAAL,CAAU,YAAV,CAAuB,CAAvB,GAA2B,CAD/B,CAAP;AAED;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,mBAAmB,CAAC,IAAD,EAAO,YAAP,EAAqB,cAArB,EAAqC;AACtD,UAAM;AAAE,MAAA,GAAF;AAAO,MAAA;AAAP,QAAkB,KAAK,IAAL,CAAU,SAAlC;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,EAAwB,YAAxB,CAArB,CAFsD,CAG1D;;AACI,QAAI,YAAY,KAAK,YAAjB,IAAiC,cAArC,EAAqD;AACnD,YAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,YAAY,GAAG,GAAG,CAAC,IAAD,CAA7B,CAAd;AACA,MAAA,GAAG,CAAC,IAAD,CAAH,IAAa,KAAK,IAAI,cAAc,IAAI,gBAAtB,CAAlB;AACD,KAHD,MAGO;AACL,MAAA,GAAG,CAAC,IAAD,CAAH,GAAY,YAAZ;AACD;AACF;;AArTe;ACxBlB;;AACA;;;AAEA,MAAM,mBAAmB,GAAG,IAA5B;AACA,MAAM,mBAAmB,GAAG,IAA5B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS,mBAAT,CAA6B,CAA7B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC;AACtC,EAAA,CAAC,CAAC,CAAF,GAAM,CAAC,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAX,IAAgB,CAAtB;AACA,EAAA,CAAC,CAAC,CAAF,GAAM,CAAC,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAX,IAAgB,CAAtB;AACA,SAAO,CAAP;AACD;;AAED,MAAM,WAAN,CAAkB;AAClB;AACA;AACA;AACE,EAAA,WAAW,CAAC,QAAD,EAAW;AACpB,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,IAAL,GAAY,KAAK,QAAL,CAAc,IAA1B;AACJ;;AACI,SAAK,SAAL,GAAiB,EAAjB;AAEJ;;AACI,SAAK,eAAL,GAAuB,EAAvB;AACJ;;AACI,SAAK,UAAL,GAAkB,EAAlB;AACD;;AAED,EAAA,KAAK,GAAG;AACN,SAAK,eAAL,GAAuB,KAAK,IAAL,CAAU,SAAV,CAAoB,aAA3C;AACA,IAAA,cAAc,CAAC,KAAK,SAAN,EAAiB,KAAK,IAAL,CAAU,SAAV,CAAoB,GAArC,CAAd;AACA,SAAK,IAAL,CAAU,UAAV,CAAqB,UAArB;AACA,SAAK,oBAAL,GAA4B,KAA5B;AACD;;AAED,EAAA,MAAM,GAAG;AACP,UAAM;AAAE,MAAA,EAAF;AAAM,MAAA,OAAN;AAAe,MAAA,EAAf;AAAmB,MAAA,OAAnB;AAA4B,MAAA;AAA5B,QAAqC,KAAK,QAAhD;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,IAAtB;AACA,UAAM,YAAY,GAAG,SAAS,CAAC,UAAV,CAAqB,GAA1C;AACA,UAAM,YAAY,GAAG,SAAS,CAAC,UAAV,CAAqB,GAA1C;;AAEA,QAAI,CAAC,SAAS,CAAC,UAAV,EAAD,IAA2B,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA/B,EAA4D;AAC1D;AACD;;AAED,IAAA,mBAAmB,CAAC,KAAK,eAAN,EAAuB,OAAvB,EAAgC,OAAhC,CAAnB;AACA,IAAA,mBAAmB,CAAC,KAAK,UAAN,EAAkB,EAAlB,EAAsB,EAAtB,CAAnB;;AAEA,QAAI,aAAa,GAAI,IAAI,kBAAkB,CAAC,OAAD,EAAU,OAAV,CAAvB,GACA,kBAAkB,CAAC,EAAD,EAAK,EAAL,CADlB,GAEA,KAAK,eAFzB,CAbO,CAiBX;;;AACI,QAAI,aAAa,GAAG,SAAS,CAAC,UAAV,CAAqB,OAArB,GAAgC,SAAS,CAAC,UAAV,CAAqB,OAArB,GAA+B,EAAnF,EAAwF;AACtF,WAAK,oBAAL,GAA4B,IAA5B;AACD;;AAED,QAAI,aAAa,GAAG,YAApB,EAAkC;AAChC,UAAI,IAAI,CAAC,OAAL,CAAa,YAAb,IACG,CAAC,KAAK,oBADT,IAEG,KAAK,eAAL,IAAwB,SAAS,CAAC,UAAV,CAAqB,OAFpD,EAE6D;AACnE;AACQ,cAAM,SAAS,GAAG,IAAK,CAAC,YAAY,GAAG,aAAhB,KAAkC,YAAY,GAAG,GAAjD,CAAvB;;AACA,YAAI,CAAC,IAAI,CAAC,QAAL,CAAc,YAAd,EAA4B;AAAE,UAAA;AAAF,SAA5B,EAA2C,gBAAhD,EAAkE;AAChE,UAAA,IAAI,CAAC,cAAL,CAAoB,SAApB;AACD;AACF,OARD,MAQO;AACb;AACQ,QAAA,aAAa,GAAG,YAAY,GAAG,CAAC,YAAY,GAAG,aAAhB,IAAiC,mBAAhE;AACD;AACF,KAbD,MAaO,IAAI,aAAa,GAAG,YAApB,EAAkC;AAC7C;AACM,MAAA,aAAa,GAAG,YAAY,GAAG,CAAC,aAAa,GAAG,YAAjB,IAAiC,mBAAhE;AACD;;AAED,IAAA,SAAS,CAAC,GAAV,CAAc,CAAd,GAAkB,KAAK,yBAAL,CAA+B,GAA/B,EAAoC,aAApC,CAAlB;AACA,IAAA,SAAS,CAAC,GAAV,CAAc,CAAd,GAAkB,KAAK,yBAAL,CAA+B,GAA/B,EAAoC,aAApC,CAAlB;AAEA,IAAA,SAAS,CAAC,YAAV,CAAuB,aAAvB;AACA,IAAA,SAAS,CAAC,mBAAV;AACD;;AAED,EAAA,GAAG,GAAG;AACJ,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,IAAtB;;AACA,QAAI,SAAS,CAAC,aAAV,GAA0B,SAAS,CAAC,UAAV,CAAqB,OAA/C,IACG,CAAC,KAAK,oBADT,IAEG,IAAI,CAAC,OAAL,CAAa,YAFpB,EAEkC;AAChC,MAAA,IAAI,CAAC,KAAL;AACD,KAJD,MAIO;AACL,WAAK,cAAL;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,yBAAyB,CAAC,IAAD,EAAO,aAAP,EAAsB;AAC7C,UAAM,UAAU,GAAG,aAAa,GAAG,KAAK,eAAxC;AACA,WAAO,KAAK,UAAL,CAAgB,IAAhB,IACI,CAAC,KAAK,eAAL,CAAqB,IAArB,IAA6B,KAAK,SAAL,CAAe,IAAf,CAA9B,IAAsD,UADjE;AAED;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,cAAc,CAAC,aAAD,EAAgB;AAC5B,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,IAAtB;;AAEA,QAAI,CAAC,SAAS,CAAC,UAAV,EAAL,EAA6B;AAC3B;AACD;;AAED,QAAI,KAAK,UAAL,CAAgB,CAAhB,KAAsB,SAA1B,EAAqC;AACnC,MAAA,aAAa,GAAG,IAAhB;AACD;;AAED,UAAM,aAAa,GAAG,SAAS,CAAC,aAAhC;AAEJ;;AACI,QAAI,oBAAJ;AACA,QAAI,wBAAwB,GAAG,IAA/B;;AAEA,QAAI,aAAa,GAAG,SAAS,CAAC,UAAV,CAAqB,OAAzC,EAAkD;AAChD,MAAA,oBAAoB,GAAG,SAAS,CAAC,UAAV,CAAqB,OAA5C,CADgD,CAEtD;AACK,KAHD,MAGO,IAAI,aAAa,GAAG,SAAS,CAAC,UAAV,CAAqB,GAAzC,EAA8C;AACnD,MAAA,oBAAoB,GAAG,SAAS,CAAC,UAAV,CAAqB,GAA5C,CADmD,CAEzD;AACK,KAHM,MAGA;AACL,MAAA,wBAAwB,GAAG,KAA3B;AACA,MAAA,oBAAoB,GAAG,aAAvB;AACD;;AAED,UAAM,gBAAgB,GAAG,IAAI,CAAC,SAA9B;AACA,UAAM,gBAAgB,GAAG,IAAI,CAAC,SAAL,GAAiB,CAA1C;AAEA,UAAM,UAAU,GAAG,cAAc,CAAC,EAAD,EAAK,SAAS,CAAC,GAAf,CAAjC;AACA,QAAI,cAAc,GAAG,cAAc,CAAC,EAAD,EAAK,UAAL,CAAnC;;AAEA,QAAI,aAAJ,EAAmB;AACjB,WAAK,UAAL,CAAgB,CAAhB,GAAoB,CAApB;AACA,WAAK,UAAL,CAAgB,CAAhB,GAAoB,CAApB;AACA,WAAK,eAAL,CAAqB,CAArB,GAAyB,CAAzB;AACA,WAAK,eAAL,CAAqB,CAArB,GAAyB,CAAzB;AACA,WAAK,eAAL,GAAuB,aAAvB;AACA,MAAA,cAAc,CAAC,KAAK,SAAN,EAAiB,UAAjB,CAAd;AACD;;AAED,QAAI,wBAAJ,EAA8B;AAC5B,MAAA,cAAc,GAAG;AACf,QAAA,CAAC,EAAE,KAAK,yBAAL,CAA+B,GAA/B,EAAoC,oBAApC,CADY;AAEf,QAAA,CAAC,EAAE,KAAK,yBAAL,CAA+B,GAA/B,EAAoC,oBAApC;AAFY,OAAjB;AAID,KAjD2B,CAmDhC;;;AACI,IAAA,SAAS,CAAC,YAAV,CAAuB,oBAAvB;AAEA,IAAA,cAAc,GAAG;AACf,MAAA,CAAC,EAAE,SAAS,CAAC,MAAV,CAAiB,UAAjB,CAA4B,GAA5B,EAAiC,cAAc,CAAC,CAAhD,CADY;AAEf,MAAA,CAAC,EAAE,SAAS,CAAC,MAAV,CAAiB,UAAjB,CAA4B,GAA5B,EAAiC,cAAc,CAAC,CAAhD;AAFY,KAAjB,CAtD4B,CA2DhC;;AACI,IAAA,SAAS,CAAC,YAAV,CAAuB,aAAvB;AAEA,QAAI,cAAc,GAAG,IAArB;;AACA,QAAI,WAAW,CAAC,cAAD,EAAiB,UAAjB,CAAf,EAA6C;AAC3C,MAAA,cAAc,GAAG,KAAjB;AACD;;AAED,QAAI,CAAC,cAAD,IAAmB,CAAC,wBAApB,IAAgD,CAAC,gBAArD,EAAuE;AAC3E;AACM,MAAA,SAAS,CAAC,cAAV,CAAyB,oBAAzB;;AACA,MAAA,SAAS,CAAC,mBAAV,GAHqE,CAK3E;;AACM;AACD;;AAED,IAAA,IAAI,CAAC,UAAL,CAAgB,UAAhB;AAEA,IAAA,IAAI,CAAC,UAAL,CAAgB,WAAhB,CAA4B;AAC1B,MAAA,KAAK,EAAE,IADmB;AAE1B,MAAA,KAAK,EAAE,CAFmB;AAG1B,MAAA,GAAG,EAAE,IAHqB;AAI1B,MAAA,QAAQ,EAAE,CAJgB;AAK1B,MAAA,YAAY,EAAE,CALY;AAM1B,MAAA,gBAAgB,EAAE,EANQ;AAO1B,MAAA,QAAQ,EAAG,GAAD,IAAS;AACjB,QAAA,GAAG,IAAI,IAAP,CADiB,CACL;;AAEZ,YAAI,cAAc,IAAI,wBAAtB,EAAgD;AAC9C,cAAI,cAAJ,EAAoB;AAClB,YAAA,SAAS,CAAC,GAAV,CAAc,CAAd,GAAkB,UAAU,CAAC,CAAX,GAAe,CAAC,cAAc,CAAC,CAAf,GAAmB,UAAU,CAAC,CAA/B,IAAoC,GAArE;AACA,YAAA,SAAS,CAAC,GAAV,CAAc,CAAd,GAAkB,UAAU,CAAC,CAAX,GAAe,CAAC,cAAc,CAAC,CAAf,GAAmB,UAAU,CAAC,CAA/B,IAAoC,GAArE;AACD;;AAED,cAAI,wBAAJ,EAA8B;AAC5B,kBAAM,YAAY,GAAG,aAAa,GACpB,CAAC,oBAAoB,GAAG,aAAxB,IAAyC,GADvD;AAEA,YAAA,SAAS,CAAC,YAAV,CAAuB,YAAvB;AACD;;AAED,UAAA,SAAS,CAAC,mBAAV;AACD,SAhBgB,CAkBzB;;;AACQ,YAAI,gBAAgB,IAAI,IAAI,CAAC,SAAL,GAAiB,CAAzC,EAA4C;AACpD;AACA;AACA;AACU,UAAA,IAAI,CAAC,cAAL,CAAoB,KAAK,CACvB,gBAAgB,GAAG,CAAC,IAAI,gBAAL,IAAyB,GADrB,EAC0B,CAD1B,EAC6B,CAD7B,CAAzB;AAGD;AACF,OAlCyB;AAmC1B,MAAA,UAAU,EAAE,MAAM;AACxB;AACQ,QAAA,SAAS,CAAC,cAAV,CAAyB,oBAAzB;;AACA,QAAA,SAAS,CAAC,mBAAV;AACD;AAvCyB,KAA5B;AAyCD;;AA5Ne;ACxBlB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS,mBAAT,CAA6B,KAA7B,EAAoC;AAClC,SAAO,CAAC;AAAA;AAA8B,EAAA,KAAK,CAAC,MAAP,CAAe,OAAf,CAAuB,kBAAvB,CAArC;AACD;AAED;AACA;AACA;;;AACA,MAAM,UAAN,CAAiB;AACjB;AACA;AACA;AACE,EAAA,WAAW,CAAC,QAAD,EAAW;AACpB,SAAK,QAAL,GAAgB,QAAhB;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,KAAK,CAAC,KAAD,EAAQ,aAAR,EAAuB;AAC1B,UAAM,eAAe;AAAA;AAA+B,IAAA,aAAa,CAAC,MAAf,CAAuB,SAA1E;AACA,UAAM,YAAY,GAAG,eAAe,CAAC,QAAhB,CAAyB,WAAzB,CAArB;AACA,UAAM,iBAAiB,GAAG,eAAe,CAAC,QAAhB,CAAyB,YAAzB,KACG,eAAe,CAAC,QAAhB,CAAyB,iBAAzB,CAD7B;;AAGA,QAAI,YAAJ,EAAkB;AAChB,WAAK,mBAAL,CAAyB,YAAzB,EAAuC,KAAvC,EAA8C,aAA9C;AACD,KAFD,MAEO,IAAI,iBAAJ,EAAuB;AAC5B,WAAK,mBAAL,CAAyB,SAAzB,EAAoC,KAApC,EAA2C,aAA3C;AACD;AACF;AAEH;AACA;AACA;AACA;;;AACE,EAAA,GAAG,CAAC,KAAD,EAAQ,aAAR,EAAuB;AACxB,QAAI,mBAAmB,CAAC,aAAD,CAAvB,EAAwC;AACtC,WAAK,mBAAL,CAAyB,KAAzB,EAAgC,KAAhC,EAAuC,aAAvC;AACD;AACF;AAEH;AACA;AACA;AACA;;;AACE,EAAA,SAAS,CAAC,KAAD,EAAQ,aAAR,EAAuB;AAC9B,QAAI,mBAAmB,CAAC,aAAD,CAAvB,EAAwC;AACtC,WAAK,mBAAL,CAAyB,WAAzB,EAAsC,KAAtC,EAA6C,aAA7C;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,mBAAmB,CAAC,UAAD,EAAa,KAAb,EAAoB,aAApB,EAAmC;AACpD,UAAM;AAAE,MAAA;AAAF,QAAW,KAAK,QAAtB;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,IAAtB;AACA,UAAM,cAAc,GAAiD,UAAU,GAAG,QAAlF;AACA,UAAM,WAAW,GAAG,IAAI,CAAC,OAAL,CAAa,cAAb,CAApB;;AAEA,QAAI,IAAI,CAAC,QAAL,CAAc,cAAd,EAA8B;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAA9B,EAAwD,gBAA5D,EAA8E;AAC5E;AACD;;AAED,QAAI,OAAO,WAAP,KAAuB,UAA3B,EAAuC;AACrC,MAAA,WAAW,CAAC,IAAZ,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,aAA9B;AACA;AACD;;AAED,YAAQ,WAAR;AACE,WAAK,OAAL;AACA,WAAK,MAAL;AACE,QAAA,IAAI,CAAC,WAAD,CAAJ;AACA;;AACF,WAAK,MAAL;AACE,QAAA,SAAS,CAAC,UAAV,CAAqB,KAArB;AACA;;AACF,WAAK,eAAL;AACN;AACA;AACQ,YAAI,SAAS,CAAC,UAAV,MACG,SAAS,CAAC,UAAV,CAAqB,SAArB,KAAmC,SAAS,CAAC,UAAV,CAAqB,OAD/D,EACwE;AACtE,UAAA,SAAS,CAAC,UAAV,CAAqB,KAArB;AACD,SAHD,MAGO,IAAI,IAAI,CAAC,OAAL,CAAa,uBAAjB,EAA0C;AAC/C,UAAA,IAAI,CAAC,KAAL;AACD;;AACD;;AACF,WAAK,iBAAL;AACE,aAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB,CAA2B,SAA3B,CAAqC,MAArC,CAA4C,kBAA5C,EADF,CAEN;AACA;AACA;AACA;AACA;;AACQ;AAzBJ;AA2BD;;AA5Fc;AChBjB;;AACA;AAEA;AACA;;;AACA,MAAM,qBAAqB,GAAG,EAA9B,C,CACA;;AAEA,MAAM,gBAAgB,GAAG,GAAzB,C,CAA6B;;AAC7B,MAAM,gBAAgB,GAAG,EAAzB,C,CAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM,QAAN,CAAe;AACf;AACA;AACA;AACE,EAAA,WAAW,CAAC,IAAD,EAAO;AAChB,SAAK,IAAL,GAAY,IAAZ;AAEJ;;AACI,SAAK,QAAL,GAAgB,SAAhB,CAJgB,CAMpB;AACA;;AACA;;AACI,SAAK,EAAL,GAAU,EAAV,CATgB,CASH;;AACjB;;AACI,SAAK,EAAL,GAAU,EAAV,CAXgB,CAWH;;AACjB;;AACI,SAAK,MAAL,GAAc,EAAd;AACJ;;AACI,SAAK,MAAL,GAAc,EAAd;AACJ;;AACI,SAAK,OAAL,GAAe,EAAf;AACJ;;AACI,SAAK,OAAL,GAAe,EAAf;AACJ;;AACI,SAAK,QAAL,GAAgB,EAAhB;AAEJ;;AACI,SAAK,YAAL,GAAoB,EAApB;AACJ;;AACI,SAAK,WAAL,GAAmB,EAAnB;AACA,SAAK,gBAAL,GAAwB,CAAxB;AACJ;;AACI,SAAK,gBAAL,GAAwB,EAAxB;AAEA,SAAK,kBAAL,GAA0B,kBAAkB,MAA5C;AACA,SAAK,oBAAL,GAA4B,CAAC,CAAE,MAAM,CAAC,YAAtC;AACA,SAAK,aAAL,GAAqB,KAAK,kBAAL,IACK,KAAK,oBAAL,IAA6B,SAAS,CAAC,cAAV,GAA2B,CADlF;;AAGA,QAAI,CAAC,KAAK,aAAV,EAAyB;AAC7B;AACM,MAAA,IAAI,CAAC,OAAL,CAAa,cAAb,GAA8B,KAA9B;AACD;;AAED,SAAK,IAAL,GAAY,IAAI,WAAJ,CAAgB,IAAhB,CAAZ;AACA,SAAK,UAAL,GAAkB,IAAI,WAAJ,CAAgB,IAAhB,CAAlB;AACA,SAAK,UAAL,GAAkB,IAAI,UAAJ,CAAe,IAAf,CAAlB;AAEA,IAAA,IAAI,CAAC,EAAL,CAAQ,YAAR,EAAsB,MAAM;AAC1B,MAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,IAAI,CAAC,UAArB,EAAiC,OAAjC,EAA0C,CAAC,IAAI,KAAK,QAAL,CAAc,CAAd,CAA/C;;AAEA,UAAI,KAAK,oBAAT,EAA+B;AAC7B,aAAK,WAAL,CAAiB,SAAjB,EAA4B,MAA5B,EAAoC,IAApC,EAA0C,QAA1C;AACD,OAFD,MAEO,IAAI,KAAK,kBAAT,EAA6B;AAClC,aAAK,WAAL,CAAiB,OAAjB,EAA0B,OAA1B,EAAmC,KAAnC,EAA0C,QAA1C,EADkC,CAG1C;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACQ,QAAA,IAAI,CAAC,UAAL,CAAgB,WAAhB,GAA8B,MAAM,CAAE,CAAtC,CAXkC,CAWK;;;AACvC,QAAA,IAAI,CAAC,UAAL,CAAgB,UAAhB,GAA6B,MAAM,CAAE,CAArC,CAZkC,CAYI;;AACvC,OAbM,MAaA;AACL,aAAK,WAAL,CAAiB,OAAjB,EAA0B,MAA1B,EAAkC,IAAlC;AACD;AACF,KArBD;AAsBD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,EAAb,EAAiB,MAAjB,EAAyB;AAClC,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,UAAM;AAAE,MAAA;AAAF,QAAa,IAAnB;AAEA,UAAM,WAAW,GAAG,MAAM,GAAG,IAAI,GAAG,MAAV,GAAmB,EAA7C;AAEA,IAAA,MAAM,CAAC,GAAP,CAAW,IAAI,CAAC,UAAhB,EAA4B,IAAI,GAAG,IAAnC,EAAyC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAzC;AACA,IAAA,MAAM,CAAC,GAAP,CAAW,MAAX,EAAmB,IAAI,GAAG,MAA1B,EAAkC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAlC;AACA,IAAA,MAAM,CAAC,GAAP,CAAW,MAAX,EAAmB,IAAI,GAAG,EAA1B,EAA8B,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAA9B;;AACA,QAAI,WAAJ,EAAiB;AACf,MAAA,MAAM,CAAC,GAAP,CAAW,IAAI,CAAC,UAAhB,EAA4B,WAA5B,EAAyC,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAAzC;AACD;AACF;AAEH;AACA;AACA;;;AACE,EAAA,aAAa,CAAC,CAAD,EAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACI,QAAI,cAAJ;;AACA,QAAI,CAAC,CAAC,IAAF,KAAW,WAAX,IAA0B,CAAC,CAAC,WAAF,KAAkB,OAAhD,EAAyD;AACvD,MAAA,cAAc,GAAG,IAAjB;AACD,KAVc,CAYnB;AACA;AACA;;;AACI,QAAI,cAAc,IAAI,CAAC,CAAC,MAAF,GAAW,CAAjC,EAAoC;AAClC;AACD;;AAED,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB,CAnBe,CAqBnB;;AACI,QAAI,CAAC,IAAI,CAAC,MAAL,CAAY,MAAjB,EAAyB;AACvB,MAAA,CAAC,CAAC,cAAF;AACA;AACD;;AAED,QAAI,IAAI,CAAC,QAAL,CAAc,aAAd,EAA6B;AAAE,MAAA,aAAa,EAAE;AAAjB,KAA7B,EAAmD,gBAAvD,EAAyE;AACvE;AACD;;AAED,QAAI,cAAJ,EAAoB;AAClB,MAAA,IAAI,CAAC,aAAL,GADkB,CAGxB;AACA;;AACM,WAAK,6BAAL,CAAmC,CAAnC;AACD;;AAED,IAAA,IAAI,CAAC,UAAL,CAAgB,OAAhB;;AAEA,SAAK,aAAL,CAAmB,CAAnB,EAAsB,MAAtB;;AAEA,SAAK,WAAL,GAAmB,IAAnB;;AAEA,QAAI,KAAK,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,WAAK,QAAL,GAAgB,IAAhB,CAD+B,CAErC;AACA;;AACM,MAAA,cAAc,CAAC,KAAK,OAAN,EAAe,KAAK,EAApB,CAAd;AACD;;AAED,QAAI,KAAK,gBAAL,GAAwB,CAA5B,EAA+B;AACnC;AACM,WAAK,cAAL;;AACA,WAAK,YAAL,GAAoB,IAApB;AACD,KAJD,MAIO;AACL,WAAK,YAAL,GAAoB,KAApB;AACD;AACF;AAEH;AACA;AACA;;;AACE,EAAA,aAAa,CAAC,CAAD,EAAI;AACf,IAAA,CAAC,CAAC,cAAF,GADe,CACI;;AAEnB,QAAI,CAAC,KAAK,gBAAV,EAA4B;AAC1B;AACD;;AAED,SAAK,aAAL,CAAmB,CAAnB,EAAsB,MAAtB;;AAEA,QAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,aAAnB,EAAkC;AAAE,MAAA,aAAa,EAAE;AAAjB,KAAlC,EAAwD,gBAA5D,EAA8E;AAC5E;AACD;;AAED,QAAI,KAAK,gBAAL,KAA0B,CAA1B,IAA+B,CAAC,KAAK,UAAzC,EAAqD;AACnD,UAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,aAAK,uBAAL;AACD,OAHkD,CAKzD;;;AACM,UAAI,KAAK,QAAL,IAAiB,CAAC,KAAK,UAA3B,EAAuC;AACrC,YAAI,KAAK,SAAT,EAAoB;AAClB,eAAK,SAAL,GAAiB,KAAjB;AACA,eAAK,UAAL,CAAgB,GAAhB;AACD;;AAED,aAAK,UAAL,GAAkB,IAAlB;;AACA,aAAK,cAAL,GAPqC,CAOf;AAE9B;;;AACQ,aAAK,kBAAL;;AACA,aAAK,aAAL,GAAqB,IAAI,CAAC,GAAL,EAArB,CAXqC,CAY7C;;AACQ,aAAK,mBAAL,GAA2B,KAA3B;AACA,QAAA,cAAc,CAAC,KAAK,WAAN,EAAmB,KAAK,EAAxB,CAAd;AACA,aAAK,QAAL,CAAc,CAAd,GAAkB,CAAlB;AACA,aAAK,QAAL,CAAc,CAAd,GAAkB,CAAlB;AACA,aAAK,IAAL,CAAU,KAAV;;AAEA,aAAK,YAAL;;AACA,aAAK,cAAL;AACD;AACF,KA5BD,MA4BO,IAAI,KAAK,gBAAL,GAAwB,CAAxB,IAA6B,CAAC,KAAK,SAAvC,EAAkD;AACvD,WAAK,WAAL;;AAEA,WAAK,SAAL,GAAiB,IAAjB,CAHuD,CAK7D;;AACM,WAAK,kBAAL;;AAEA,WAAK,UAAL,CAAgB,KAAhB;;AAEA,WAAK,YAAL;;AACA,WAAK,cAAL;AACD;AACF;AAEH;AACA;AACA;;;AACE,EAAA,WAAW,GAAG;AACZ,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL,GAAkB,KAAlB,CADmB,CAGzB;AACA;;AACM,UAAI,CAAC,KAAK,mBAAV,EAA+B;AAC7B,aAAK,eAAL,CAAqB,IAArB;AACD;;AAED,WAAK,IAAL,CAAU,GAAV;AACA,WAAK,QAAL,GAAgB,IAAhB;AACD;AACF;AAEH;AACA;AACA;;;AACE,EAAA,WAAW,CAAC,CAAD,EAAI;AACb,QAAI,CAAC,KAAK,gBAAV,EAA4B;AAC1B;AACD;;AAED,SAAK,aAAL,CAAmB,CAAnB,EAAsB,IAAtB;;AAEA,QAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,WAAnB,EAAgC;AAAE,MAAA,aAAa,EAAE;AAAjB,KAAhC,EAAsD,gBAA1D,EAA4E;AAC1E;AACD;;AAED,QAAI,KAAK,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,WAAK,WAAL,GAAmB,KAAnB;;AACA,WAAK,YAAL;;AAEA,UAAI,KAAK,UAAT,EAAqB;AACnB,aAAK,WAAL;AACD,OAFD,MAEO,IAAI,CAAC,KAAK,SAAN,IAAmB,CAAC,KAAK,YAA7B,EAA2C;AACxD;AACQ,aAAK,UAAL,CAAgB,CAAhB;AACD;AACF;;AAED,QAAI,KAAK,gBAAL,GAAwB,CAAxB,IAA6B,KAAK,SAAtC,EAAiD;AAC/C,WAAK,SAAL,GAAiB,KAAjB;AACA,WAAK,UAAL,CAAgB,GAAhB;;AAEA,UAAI,KAAK,gBAAL,KAA0B,CAA9B,EAAiC;AACvC;AACQ,aAAK,QAAL,GAAgB,IAAhB;;AACA,aAAK,kBAAL;AACD;AACF;AACF;AAEH;AACA;AACA;;;AACE,EAAA,cAAc,GAAG;AACf,QAAI,KAAK,UAAL,IAAmB,KAAK,SAA5B,EAAuC;AACrC,WAAK,eAAL;;AAEA,UAAI,KAAK,UAAT,EAAqB;AAC3B;AACQ,YAAI,CAAC,WAAW,CAAC,KAAK,EAAN,EAAU,KAAK,MAAf,CAAhB,EAAwC;AACtC,eAAK,IAAL,CAAU,MAAV;AACD;AACF,OALD;AAKC;AAAgC;AAC/B,cAAI,CAAC,WAAW,CAAC,KAAK,EAAN,EAAU,KAAK,MAAf,CAAZ,IACG,CAAC,WAAW,CAAC,KAAK,EAAN,EAAU,KAAK,MAAf,CADnB,EAC2C;AACzC,iBAAK,UAAL,CAAgB,MAAhB;AACD;AACF;;AAED,WAAK,iBAAL;;AACA,WAAK,GAAL,GAAW,qBAAqB,CAAC,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAD,CAAhC;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,eAAe,CAAC,KAAD,EAAQ;AACrB,UAAM,IAAI,GAAG,IAAI,CAAC,GAAL,EAAb;AACA,UAAM,QAAQ,GAAG,IAAI,GAAG,KAAK,aAA7B;;AAEA,QAAI,QAAQ,GAAG,EAAX,IAAiB,CAAC,KAAtB,EAA6B;AAC3B;AACD;;AAGD,SAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,YAAL,CAAkB,GAAlB,EAAuB,QAAvB,CAAlB;AACA,SAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,YAAL,CAAkB,GAAlB,EAAuB,QAAvB,CAAlB;AAEA,SAAK,aAAL,GAAqB,IAArB;AACA,IAAA,cAAc,CAAC,KAAK,WAAN,EAAmB,KAAK,EAAxB,CAAd;AACA,SAAK,mBAAL,GAA2B,IAA3B;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,UAAU,CAAC,CAAD,EAAI;AACZ,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,IAA5B,CADY,CAGhB;;AACI,QAAI,UAAU,CAAC,SAAX,EAAJ,EAA4B;AAChC;AACA;AACM,MAAA,UAAU,CAAC,WAAX,CAAuB,CAAvB,EAA0B,IAA1B;AACA;AACD,KATW,CAWhB;;;AACI,QAAI,CAAC,CAAC,IAAF,CAAO,OAAP,CAAe,QAAf,IAA2B,CAA/B,EAAkC;AAChC;AACD,KAdW,CAgBhB;;;AACI,QAAI,CAAC,CAAC,IAAF,KAAW,SAAX,IAAwB,CAAC,CAAC,WAAF,KAAkB,OAA9C,EAAuD;AACrD,WAAK,UAAL,CAAgB,KAAhB,CAAsB,KAAK,OAA3B,EAAoC,CAApC;AACA;AACD,KApBW,CAsBhB;;;AACI,UAAM,QAAQ,GAAG,KAAK,IAAL,CAAU,OAAV,CAAkB,eAAlB,GAAoC,gBAApC,GAAuD,CAAxE,CAvBY,CAyBhB;AACA;AACA;;AACI,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,cAAL,GADkB,CAExB;;;AACM,UAAI,kBAAkB,CAAC,KAAK,YAAN,EAAoB,KAAK,OAAzB,CAAlB,GAAsD,gBAA1D,EAA4E;AAC1E,aAAK,UAAL,CAAgB,SAAhB,CAA0B,KAAK,OAA/B,EAAwC,CAAxC;AACD;AACF,KAND,MAMO;AACL,MAAA,cAAc,CAAC,KAAK,YAAN,EAAoB,KAAK,OAAzB,CAAd;AACA,WAAK,SAAL,GAAiB,UAAU,CAAC,MAAM;AAChC,aAAK,UAAL,CAAgB,GAAhB,CAAoB,KAAK,OAAzB,EAAkC,CAAlC;;AACA,aAAK,cAAL;AACD,OAH0B,EAGxB,QAHwB,CAA3B;AAID;AACF;AAEH;AACA;AACA;;;AACE,EAAA,cAAc,GAAG;AACf,QAAI,KAAK,SAAT,EAAoB;AAClB,MAAA,YAAY,CAAC,KAAK,SAAN,CAAZ;AACA,WAAK,SAAL,GAAiB,IAAjB;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,YAAY,CAAC,IAAD,EAAO,QAAP,EAAiB;AAC/B;AACI,UAAM,YAAY,GAAG,KAAK,EAAL,CAAQ,IAAR,IAAgB,KAAK,WAAL,CAAiB,IAAjB,CAArC;;AAEA,QAAI,IAAI,CAAC,GAAL,CAAS,YAAT,IAAyB,CAAzB,IAA8B,QAAQ,GAAG,CAA7C,EAAgD;AAC9C,aAAO,YAAY,GAAG,QAAtB;AACD;;AAED,WAAO,CAAP;AACD;AAEH;AACA;AACA;;;AACE,EAAA,YAAY,GAAG;AACb,QAAI,KAAK,GAAT,EAAc;AACZ,MAAA,oBAAoB,CAAC,KAAK,GAAN,CAApB;AACA,WAAK,GAAL,GAAW,IAAX;AACD;AACF;AAEH;AACA;AACA;AACA;;;AACE,EAAA,6BAA6B,CAAC,CAAD,EAAI;AACnC;AACA;AACI,IAAA,CAAC,CAAC,cAAF;AACA,WAAO,IAAP;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,aAAa,CAAC,CAAD,EAAI,WAAJ,EAAiB;AAC5B,QAAI,KAAK,oBAAT,EAA+B;AAC7B,YAAM,YAAY,GAAgC,CAAlD,CAD6B,CAEnC;;AACM,YAAM,YAAY,GAAG,KAAK,gBAAL,CAAsB,SAAtB,CAAiC,aAAD,IAAmB;AACtE,eAAO,aAAa,CAAC,EAAd,KAAqB,YAAY,CAAC,SAAzC;AACD,OAFoB,CAArB;;AAIA,UAAI,WAAW,KAAK,IAAhB,IAAwB,YAAY,GAAG,CAAC,CAA5C,EAA+C;AACrD;AACQ,aAAK,gBAAL,CAAsB,MAAtB,CAA6B,YAA7B,EAA2C,CAA3C;AACD,OAHD,MAGO,IAAI,WAAW,KAAK,MAAhB,IAA0B,YAAY,KAAK,CAAC,CAAhD,EAAmD;AAChE;AACQ,aAAK,gBAAL,CAAsB,IAAtB,CAA2B,KAAK,uBAAL,CAA6B,YAA7B,EAA2C,EAA3C,CAA3B;AACD,OAHM,MAGA,IAAI,YAAY,GAAG,CAAC,CAApB,EAAuB;AACpC;AACQ,aAAK,uBAAL,CAA6B,YAA7B,EAA2C,KAAK,gBAAL,CAAsB,YAAtB,CAA3C;AACD;;AAED,WAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,MAA9C,CAlB6B,CAoBnC;AACA;;AACM,UAAI,KAAK,gBAAL,GAAwB,CAA5B,EAA+B;AAC7B,QAAA,cAAc,CAAC,KAAK,EAAN,EAAU,KAAK,gBAAL,CAAsB,CAAtB,CAAV,CAAd;AACD;;AAED,UAAI,KAAK,gBAAL,GAAwB,CAA5B,EAA+B;AAC7B,QAAA,cAAc,CAAC,KAAK,EAAN,EAAU,KAAK,gBAAL,CAAsB,CAAtB,CAAV,CAAd;AACD;AACF,KA7BD,MA6BO;AACL,YAAM,UAAU,GAA8B,CAA9C;AAEA,WAAK,gBAAL,GAAwB,CAAxB;;AACA,UAAI,UAAU,CAAC,IAAX,CAAgB,OAAhB,CAAwB,OAAxB,IAAmC,CAAC,CAAxC,EAA2C;AACjD;AACA;AACQ,YAAI,UAAU,CAAC,OAAX,IAAsB,UAAU,CAAC,OAAX,CAAmB,MAAnB,GAA4B,CAAtD,EAAyD;AACvD,eAAK,uBAAL,CAA6B,UAAU,CAAC,OAAX,CAAmB,CAAnB,CAA7B,EAAoD,KAAK,EAAzD;;AACA,eAAK,gBAAL;;AACA,cAAI,UAAU,CAAC,OAAX,CAAmB,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,iBAAK,uBAAL,CAA6B,UAAU,CAAC,OAAX,CAAmB,CAAnB,CAA7B,EAAoD,KAAK,EAAzD;;AACA,iBAAK,gBAAL;AACD;AACF;AACF,OAXD,MAWO;AACb;AACQ,aAAK,uBAAL,CAA0D,CAA1D,EAA8D,KAAK,EAAnE;;AACA,YAAI,WAAW,KAAK,IAApB,EAA0B;AAClC;AACU,eAAK,gBAAL,GAAwB,CAAxB;AACD,SAHD,MAGO;AACL,eAAK,gBAAL;AACD;AACF;AACF;AACF,GA/dY,CAief;;;AACE,EAAA,iBAAiB,GAAG;AAClB,IAAA,cAAc,CAAC,KAAK,MAAN,EAAc,KAAK,EAAnB,CAAd;AACA,IAAA,cAAc,CAAC,KAAK,MAAN,EAAc,KAAK,EAAnB,CAAd;AACD,GAreY,CAuef;;;AACE,EAAA,kBAAkB,GAAG;AACnB,IAAA,cAAc,CAAC,KAAK,OAAN,EAAe,KAAK,EAApB,CAAd;AACA,IAAA,cAAc,CAAC,KAAK,OAAN,EAAe,KAAK,EAApB,CAAd;;AACA,SAAK,iBAAL;AACD;;AAED,EAAA,uBAAuB,GAAG;AACxB,QAAI,KAAK,IAAL,CAAU,UAAV,CAAqB,SAArB,EAAJ,EAAsC;AAC1C;AACM,WAAK,QAAL,GAAgB,GAAhB;AACD,KAHD,MAGO;AACX;AACM,YAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,EAAL,CAAQ,CAAR,GAAY,KAAK,OAAL,CAAa,CAAlC,IAAuC,IAAI,CAAC,GAAL,CAAS,KAAK,EAAL,CAAQ,CAAR,GAAY,KAAK,OAAL,CAAa,CAAlC,CAApD;;AAEA,UAAI,IAAI,KAAK,CAAb,EAAgB;AACtB;AACQ,cAAM,WAAW,GAAG,IAAI,GAAG,CAAP,GAAW,GAAX,GAAiB,GAArC;;AAEA,YAAI,IAAI,CAAC,GAAL,CAAS,KAAK,EAAL,CAAQ,WAAR,IAAuB,KAAK,OAAL,CAAa,WAAb,CAAhC,KAA8D,qBAAlE,EAAyF;AACvF,eAAK,QAAL,GAAgB,WAAhB;AACD;AACF;AACF;AACF;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,uBAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO;AAC5B,IAAA,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,KAAF,GAAU,KAAK,IAAL,CAAU,MAAV,CAAiB,CAAjC;AACA,IAAA,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,KAAF,GAAU,KAAK,IAAL,CAAU,MAAV,CAAiB,CAAjC;;AAEA,QAAI,eAAe,CAAnB,EAAsB;AACpB,MAAA,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,SAAT;AACD,KAFD,MAEO,IAAI,CAAC,CAAC,UAAF,KAAiB,SAArB,EAAgC;AACrC,MAAA,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,UAAT;AACD;;AAED,WAAO,CAAP;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,QAAQ,CAAC,CAAD,EAAI;AACd;AACI,QAAI,KAAK,IAAL,CAAU,UAAV,CAAqB,SAArB,EAAJ,EAAsC;AACpC,MAAA,CAAC,CAAC,cAAF;AACA,MAAA,CAAC,CAAC,eAAF;AACD;AACF;;AAhiBY;ACrBf;;AACA;;AAEA;;;AAEA,MAAM,wBAAwB,GAAG,IAAjC,C,CAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM,UAAN,CAAiB;AACjB;AACA;AACA;AACE,EAAA,WAAW,CAAC,IAAD,EAAO;AAChB,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,CAAL,GAAS,CAAT;AAEJ;;AACI,SAAK,UAAL,GAAkB,SAAlB;AAEJ;;AACI,SAAK,WAAL,GAAmB,SAAnB;AAEA,SAAK,aAAL;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,YAAD,EAAe;AACnB,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,UAAM,aAAa,GAAG,IAAI,CAAC,KAAL,CACpB,IAAI,CAAC,YAAL,CAAkB,CAAlB,GAAsB,IAAI,CAAC,YAAL,CAAkB,CAAlB,GAAsB,IAAI,CAAC,OAAL,CAAa,OADrC,CAAtB,CAFmB,CAKvB;AACA;AACA;;AACI,UAAM,iBAAiB,GAAI,aAAa,KAAK,KAAK,UAAlD;;AAEA,QAAI,iBAAJ,EAAuB;AACrB,WAAK,UAAL,GAAkB,aAAlB;AACA,WAAK,MAAL,CAAY,KAAK,aAAL,EAAZ;AACD;;AAED,SAAK,WAAL,CAAiB,OAAjB,CAAyB,CAAC,UAAD,EAAa,KAAb,KAAuB;AAC9C,UAAI,iBAAJ,EAAuB;AACrB,QAAA,YAAY,CAAC,UAAU,CAAC,EAAZ,EAAgB,CAAC,KAAK,GAAG,KAAK,oBAAd,IACE,KAAK,UADvB,CAAZ;AAED;;AAED,UAAI,YAAY,IAAI,UAAU,CAAC,KAA/B,EAAsC;AACpC,QAAA,UAAU,CAAC,KAAX,CAAiB,MAAjB;AACD;AACF,KATD;AAUD;AAEH;AACA;AACA;;;AACE,EAAA,aAAa,GAAG;AAClB;AACA;AACI,SAAK,kBAAL,GAA0B,CAA1B;AACA,SAAK,kBAAL,GAA0B,CAA1B,CAJc,CAMlB;;AACI,SAAK,UAAL,GAAkB,CAAlB,CAPc,CASlB;;AACI,SAAK,oBAAL,GAA4B,CAAC,CAA7B;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,aAAa,GAAG;AACd,SAAK,WAAL,GAAmB,EAAnB,CADc,CAGlB;AACA;;AACI,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,YAAM,EAAE,GAAG,aAAa,CAAC,YAAD,EAAe,KAAf,EAAsB,KAAK,IAAL,CAAU,SAAhC,CAAxB,CAD0B,CAGhC;;AACM,MAAA,EAAE,CAAC,KAAH,CAAS,OAAT,GAAoB,CAAC,KAAK,CAAP,GAAY,OAAZ,GAAsB,MAAzC;AAEA,WAAK,WAAL,CAAiB,IAAjB,CAAsB;AACpB,QAAA,EADoB,CAE5B;;AAF4B,OAAtB;AAID;AACF;AAEH;AACA;AACA;;;AACE,EAAA,WAAW,GAAG;AACZ,WAAO,KAAK,IAAL,CAAU,WAAV,KAA0B,CAAjC;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,WAAW,CAAC,IAAD,EAAO,OAAP,EAAgB,SAAhB,EAA2B;AACpC,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,QAAI,QAAQ,GAAG,IAAI,CAAC,cAAL,GAAsB,IAArC;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,WAAL,EAAlB;;AAEA,QAAI,IAAI,CAAC,OAAL,EAAJ,EAAoB;AAClB,MAAA,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,QAApB,CAAX;AACA,YAAM,QAAQ,GAAG,CAAC,IAAI,GAAG,SAAR,IAAqB,SAAtC;;AACA,UAAI,QAAQ,IAAI,SAAS,GAAG,CAA5B,EAA+B;AACrC;AACQ,QAAA,IAAI,GAAG,QAAP;AACD,OAHD,MAGO;AACb;AACQ,QAAA,IAAI,GAAG,QAAQ,GAAG,SAAlB;AACD;AACF,KAVD,MAUO;AACL,UAAI,QAAQ,GAAG,CAAf,EAAkB;AAChB,QAAA,QAAQ,GAAG,CAAX;AACD,OAFD,MAEO,IAAI,QAAQ,IAAI,SAAhB,EAA2B;AAChC,QAAA,QAAQ,GAAG,SAAS,GAAG,CAAvB;AACD;;AACD,MAAA,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC,cAAvB;AACD;;AAED,IAAA,IAAI,CAAC,cAAL,GAAsB,QAAtB;AACA,SAAK,kBAAL,IAA2B,IAA3B;AAEA,IAAA,IAAI,CAAC,UAAL,CAAgB,cAAhB;AAEA,UAAM,YAAY,GAAG,KAAK,aAAL,EAArB;;AACA,QAAI,CAAC,OAAL,EAAc;AACZ,WAAK,MAAL,CAAY,YAAZ;AACA,WAAK,cAAL;AACD,KAHD,MAGO;AACL,MAAA,IAAI,CAAC,UAAL,CAAgB,WAAhB,CAA4B;AAC1B,QAAA,YAAY,EAAE,IADY;AAE1B,QAAA,KAAK,EAAE,KAAK,CAFc;AAG1B,QAAA,GAAG,EAAE,YAHqB;AAI1B,QAAA,QAAQ,EAAE,SAAS,IAAI,CAJG;AAK1B,QAAA,gBAAgB,EAAE,EALQ;AAM1B,QAAA,YAAY,EAAE,CANY;AAMX;AACf,QAAA,QAAQ,EAAG,CAAD,IAAO;AACf,eAAK,MAAL,CAAY,CAAZ;AACD,SATyB;AAU1B,QAAA,UAAU,EAAE,MAAM;AAChB,eAAK,cAAL;AACA,UAAA,IAAI,CAAC,WAAL;AACD;AAbyB,OAA5B;AAgBA,UAAI,QAAQ,GAAG,IAAI,CAAC,cAAL,GAAsB,IAAI,CAAC,SAA1C;;AACA,UAAI,IAAI,CAAC,OAAL,EAAJ,EAAoB;AAClB,cAAM,YAAY,GAAG,CAAC,QAAQ,GAAG,SAAZ,IAAyB,SAA9C;;AACA,YAAI,YAAY,IAAI,SAAS,GAAG,CAAhC,EAAmC;AAC3C;AACU,UAAA,QAAQ,GAAG,YAAX;AACD,SAHD,MAGO;AACf;AACU,UAAA,QAAQ,GAAG,YAAY,GAAG,SAA1B;AACD;AACF,OA3BI,CA6BX;AACA;;;AACM,UAAI,IAAI,CAAC,GAAL,CAAS,QAAT,IAAqB,CAAzB,EAA4B;AAC1B,aAAK,cAAL;AACD;AACF;;AAED,QAAI,IAAJ,EAAU;AACR,aAAO,IAAP;AACD;AACF;AAEH;AACA;AACA;AACA;;;AACE,EAAA,aAAa,GAAG;AACd,WAAO,KAAK,UAAL,GAAkB,KAAK,kBAA9B;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,SAAS,GAAG;AACV,WAAO,KAAK,CAAL,KAAW,KAAK,aAAL,EAAlB;AACD;AAEH;AACA;AACA;;;AACE,EAAA,cAAc,GAAG;AACf,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,UAAM,kBAAkB,GAAG,KAAK,kBAAL,GAA0B,KAAK,kBAA1D;;AAEA,QAAI,CAAC,kBAAL,EAAyB;AACvB;AACD;;AAED,SAAK,kBAAL,GAA0B,KAAK,kBAA/B;AAEA,IAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,cAAtB;AAEA,QAAI,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,kBAAT,CAAd;AACA,QAAI,UAAJ;;AAEA,QAAI,OAAO,IAAI,CAAf,EAAkB;AAChB,WAAK,oBAAL,IAA6B,kBAAkB,IAAI,kBAAkB,GAAG,CAArB,GAAyB,CAAC,CAA1B,GAA8B,CAAlC,CAA/C;AACA,MAAA,OAAO,GAAG,CAAV;AACD;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,UAAI,kBAAkB,GAAG,CAAzB,EAA4B;AAC1B,QAAA,UAAU,GAAG,KAAK,WAAL,CAAiB,KAAjB,EAAb;AACA,aAAK,WAAL,CAAiB,CAAjB,IAAsB,UAAtB,CAF0B,CAEO;;AAEjC,aAAK,oBAAL;AAEA,QAAA,YAAY,CAAC,UAAU,CAAC,EAAZ,EAAgB,CAAC,KAAK,oBAAL,GAA4B,CAA7B,IAAkC,KAAK,UAAvD,CAAZ;AAEA,QAAA,IAAI,CAAC,UAAL,CAAgB,UAAhB,EAA6B,IAAI,CAAC,SAAL,GAAiB,OAAlB,GAA6B,CAA7B,GAAiC,CAA7D;AACD,OATD,MASO;AACL,QAAA,UAAU,GAAG,KAAK,WAAL,CAAiB,GAAjB,EAAb;AACA,aAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAzB,EAFK,CAEgC;;AAErC,aAAK,oBAAL;AAEA,QAAA,YAAY,CAAC,UAAU,CAAC,EAAZ,EAAgB,KAAK,oBAAL,GAA4B,KAAK,UAAjD,CAAZ;AAEA,QAAA,IAAI,CAAC,UAAL,CAAgB,UAAhB,EAA6B,IAAI,CAAC,SAAL,GAAiB,OAAlB,GAA6B,CAA7B,GAAiC,CAA7D;AACD;AACF,KAxCc,CA0CnB;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAI,IAAI,CAAC,GAAL,CAAS,KAAK,oBAAd,IAAsC,EAAtC,IAA4C,CAAC,KAAK,SAAL,EAAjD,EAAmE;AACjE,WAAK,aAAL;AACA,WAAK,MAAL;AACD,KAnDc,CAqDnB;;;AACI,IAAA,IAAI,CAAC,UAAL,CAAgB,UAAhB;AAEA,SAAK,WAAL,CAAiB,OAAjB,CAAyB,CAAC,UAAD,EAAa,CAAb,KAAmB;AAC1C,UAAI,UAAU,CAAC,KAAf,EAAsB;AAC5B;AACQ,QAAA,UAAU,CAAC,KAAX,CAAiB,WAAjB,CAA6B,CAAC,KAAK,CAAnC;AACD;AACF,KALD;AAOA,IAAA,IAAI,CAAC,SAAL,GAAiB,KAAK,WAAL,CAAiB,CAAjB,EAAoB,KAArC;AACA,IAAA,IAAI,CAAC,aAAL,CAAmB,UAAnB,CAA8B,kBAA9B;AAEA,IAAA,IAAI,CAAC,SAAL,CAAe,mBAAf;AACA,IAAA,IAAI,CAAC,QAAL,CAAc,QAAd;AACD;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,CAAD,EAAI,QAAJ,EAAc;AACtB;AACI,QAAI,mBAAJ;AACJ;;AACI,QAAI,KAAJ;;AAEA,QAAI,CAAC,KAAK,IAAL,CAAU,OAAV,EAAD,IAAwB,QAA5B,EAAsC;AAC1C;AACM,MAAA,mBAAmB,GAAG,CAAE,KAAK,UAAL,GAAkB,KAAK,kBAAxB,GAA8C,CAA/C,IAAoD,KAAK,UAA/E;AACA,MAAA,mBAAmB,IAAI,KAAK,IAAL,CAAU,SAAjC;AACA,MAAA,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,KAAK,CAApB,CAAR;;AAEA,UAAK,mBAAmB,GAAG,CAAtB,IAA2B,KAAK,GAAG,CAApC,IACI,mBAAmB,IAAI,KAAK,IAAL,CAAU,WAAV,KAA0B,CAAjD,IAAsD,KAAK,GAAG,CADtE,EAC0E;AACxE,QAAA,CAAC,GAAG,KAAK,CAAL,GAAU,KAAK,GAAG,wBAAtB;AACD;AACF;;AAED,SAAK,CAAL,GAAS,CAAT;AACA,IAAA,YAAY,CAAC,KAAK,IAAL,CAAU,SAAX,EAAsB,CAAtB,CAAZ;AAEA,SAAK,IAAL,CAAU,QAAV,CAAmB,gBAAnB,EAAqC;AAAE,MAAA,CAAF;AAAK,MAAA;AAAL,KAArC;AACD;;AA7Sc;ACrBjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAM,QAAN,CAAe;AACf;AACA;AACA;AACE,EAAA,WAAW,CAAC,IAAD,EAAO;AAChB,SAAK,IAAL,GAAY,IAAZ;AAEA,IAAA,IAAI,CAAC,EAAL,CAAQ,YAAR,EAAsB,MAAM;AAChC;AACM,UAAI,CAAC,IAAI,CAAC,OAAL,CAAa,iBAAlB,EAAqC;AAC3C;AACA;AACA;AACQ,aAAK,UAAL;AACD;;AAED,MAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAhB,EAA0B,SAA1B,EAAqC,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAArC;AACA,MAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAhB,EAA0B,SAA1B,EAAqC,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAArC;AACD,KAXD;AAaA,UAAM,iBAAiB,GAA+B,QAAQ,CAAC,aAA/D;AACA,IAAA,IAAI,CAAC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACvB,UAAI,IAAI,CAAC,OAAL,CAAa,WAAb,IACG,iBADH,IAEG,KAAK,WAFZ,EAEyB;AACvB,QAAA,iBAAiB,CAAC,KAAlB;AACD;AACF,KAND;AAOD;;AAED,EAAA,UAAU,GAAG;AACX,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,WAAK,IAAL,CAAU,OAAV,CAAkB,KAAlB;AACA,WAAK,WAAL,GAAmB,IAAnB;AACD;AACF;AAEH;AACA;AACA;;;AACE,EAAA,UAAU,CAAC,CAAD,EAAI;AACZ,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;;AAEA,QAAI,IAAI,CAAC,QAAL,CAAc,SAAd,EAAyB;AAAE,MAAA,aAAa,EAAE;AAAjB,KAAzB,EAA+C,gBAAnD,EAAqE;AACnE;AACD;;AAED,QAAI,cAAc,CAAC,CAAD,CAAlB,EAAuB;AAC3B;AACA;AACA;AACM;AACD;AAEL;;;AACI,QAAI,aAAJ;AACJ;;AACI,QAAI,IAAJ;AACA,QAAI,SAAJ;;AAEA,YAAQ,CAAC,CAAC,OAAV;AACE,WAAK,EAAL;AAAO;AACL,YAAI,IAAI,CAAC,OAAL,CAAa,MAAjB,EAAyB;AACvB,UAAA,aAAa,GAAG,OAAhB;AACD;;AACD;;AACF,WAAK,EAAL;AAAO;AACL,QAAA,aAAa,GAAG,YAAhB;AACA;;AACF,WAAK,EAAL;AAAO;AACL,QAAA,IAAI,GAAG,GAAP;AACA;;AACF,WAAK,EAAL;AAAO;AACL,QAAA,IAAI,GAAG,GAAP;AACA;;AACF,WAAK,EAAL;AAAO;AACL,QAAA,IAAI,GAAG,GAAP;AACA,QAAA,SAAS,GAAG,IAAZ;AACA;;AACF,WAAK,EAAL;AAAO;AACL,QAAA,SAAS,GAAG,IAAZ;AACA,QAAA,IAAI,GAAG,GAAP;AACA;;AACF,WAAK,CAAL;AAAM;AACJ,aAAK,UAAL;;AACA;AAzBJ,KApBY,CAiDhB;;;AACI,QAAI,IAAJ,EAAU;AACd;AACM,MAAA,CAAC,CAAC,cAAF;AAEA,YAAM;AAAE,QAAA;AAAF,UAAgB,IAAtB;;AAEA,UAAI,IAAI,CAAC,OAAL,CAAa,SAAb,IACG,IAAI,KAAK,GADZ,IAEG,IAAI,CAAC,WAAL,KAAqB,CAF5B,EAE+B;AAC7B,QAAA,aAAa,GAAG,SAAS,GAAG,MAAH,GAAY,MAArC;AACD,OAJD,MAIO,IAAI,SAAS,IAAI,SAAS,CAAC,aAAV,GAA0B,SAAS,CAAC,UAAV,CAAqB,GAAhE,EAAqE;AAClF;AACA;AACA;AACA;AACQ,QAAA,SAAS,CAAC,GAAV,CAAc,IAAd,KAAuB,SAAS,GAAG,CAAC,EAAJ,GAAS,EAAzC;AACA,QAAA,SAAS,CAAC,KAAV,CAAgB,SAAS,CAAC,GAAV,CAAc,CAA9B,EAAiC,SAAS,CAAC,GAAV,CAAc,CAA/C;AACD;AACF;;AAED,QAAI,aAAJ,EAAmB;AACjB,MAAA,CAAC,CAAC,cAAF;AACA,MAAA,IAAI,CAAC,aAAD,CAAJ;AACD;AACF;AAEH;AACA;AACA;AACA;AACA;;;AACE,EAAA,UAAU,CAAC,CAAD,EAAI;AACZ,UAAM;AAAE,MAAA;AAAF,QAAe,KAAK,IAA1B;;AACA,QAAI,QAAQ,KAAK,CAAC,CAAC,MAAf,IACG,QAAQ,KAAK,CAAC,CAAC,MADlB,IAEG,CAAC,QAAQ,CAAC,QAAT,CAAuC,CAAC,CAAC,MAAzC,CAFR,EAE2D;AAC/D;AACM,MAAA,QAAQ,CAAC,KAAT;AACD;AACF;;AAjIY;;ACXf,MAAM,cAAc,GAAG,0BAAvB;AAEA;;AAEA;AACA;AACA;;AACA,MAAM,YAAN,CAAmB;AACnB;AACA;AACA;AACA;AACA;AACE,EAAA,WAAW,CAAC,KAAD,EAAQ;AACjB,SAAK,KAAL,GAAa,KAAb;AACA,UAAM;AACJ,MAAA,MADI;AAEJ,MAAA,UAFI;AAGJ,MAAA,SAHI;AAIJ,MAAA,QAJI,CAKV;;AALU,QAMF,KANJ;AAQA,QAAI;AACF,MAAA,QADE;AAEF,MAAA;AAFE,QAGA,KAHJ;AAKJ;;AACI,SAAK,QAAL,GAAgB,QAAhB,CAhBiB,CAkBrB;;AACI,UAAM,IAAI,GAAG,SAAS,GAAG,WAAH,GAAiB,SAAvC;AACA,UAAM,SAAS,GAAG,KAAK,CAAC,IAAD,CAAvB;AAEJ;;AACI,SAAK,OAAL,GAAe,MAAf;AACJ;;AACI,SAAK,WAAL,GAAmB,UAAnB;AAEA,IAAA,QAAQ,GAAG,QAAQ,IAAI,GAAvB;AACA,IAAA,MAAM,GAAG,MAAM,IAAI,cAAnB;AAEJ;;AACI,SAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAxB,CA/BiB,CAiCrB;AACA;AACA;AACA;AACA;AACA;;AACA;;AACI,SAAK,cAAL,GAAsB,UAAU,CAAC,MAAM;AACrC,MAAA,kBAAkB,CAAC,MAAD,EAAS,IAAT,EAAe,QAAf,EAAyB,MAAzB,CAAlB;AACA,WAAK,cAAL,GAAsB,UAAU,CAAC,MAAM;AACrC,QAAA,MAAM,CAAC,gBAAP,CAAwB,eAAxB,EAAyC,KAAK,gBAA9C,EAAgE,KAAhE;AACA,QAAA,MAAM,CAAC,gBAAP,CAAwB,kBAAxB,EAA4C,KAAK,gBAAjD,EAAmE,KAAnE,EAFqC,CAI7C;AACA;AACA;AACA;;AACQ,aAAK,cAAL,GAAsB,UAAU,CAAC,MAAM;AACrC,eAAK,kBAAL;AACD,SAF+B,EAE7B,QAAQ,GAAG,GAFkB,CAAhC;AAGA,QAAA,MAAM,CAAC,KAAP,CAAa,IAAb,IAAqB,SAArB;AACD,OAZ+B,EAY7B,EAZ6B,CAAhC,CAFqC,CAc9B;AACR,KAf+B,EAe7B,CAf6B,CAAhC;AAgBD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,gBAAgB,CAAC,CAAD,EAAI;AAClB,QAAI,CAAC,CAAC,MAAF,KAAa,KAAK,OAAtB,EAA+B;AAC7B,WAAK,kBAAL;AACD;AACF;AAEH;AACA;AACA;;;AACE,EAAA,kBAAkB,GAAG;AACnB,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,SAAL,GAAiB,IAAjB;AACA,WAAK,QAAL;;AACA,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,WAAL;AACD;AACF;AACF,GArFgB,CAuFnB;;;AACE,EAAA,OAAO,GAAG;AACR,QAAI,KAAK,cAAT,EAAyB;AACvB,MAAA,YAAY,CAAC,KAAK,cAAN,CAAZ;AACD;;AACD,IAAA,qBAAqB,CAAC,KAAK,OAAN,CAArB;;AACA,SAAK,OAAL,CAAa,mBAAb,CAAiC,eAAjC,EAAkD,KAAK,gBAAvD,EAAyE,KAAzE;;AACA,SAAK,OAAL,CAAa,mBAAb,CAAiC,kBAAjC,EAAqD,KAAK,gBAA1D,EAA4E,KAA5E;;AACA,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,kBAAL;AACD;AACF;;AAlGgB;;ACTnB,MAAM,yBAAyB,GAAG,EAAlC;AACA,MAAM,qBAAqB,GAAG,IAA9B;AAEA;AACA;AACA;;AACA,MAAM,WAAN,CAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,WAAW,CAAC,eAAD,EAAkB,YAAlB,EAAgC,gBAAhC,EAAkD;AAC3D,SAAK,QAAL,GAAgB,eAAe,GAAG,IAAlC,CAD2D,CACpB;AAE3C;;AACI,SAAK,aAAL,GAAqB,YAAY,IAAI,qBAArC,CAJ2D,CAM/D;;AACI,SAAK,iBAAL,GAAyB,gBAAgB,IAAI,yBAA7C;;AAEA,QAAI,KAAK,aAAL,GAAqB,CAAzB,EAA4B;AAC1B,WAAK,gBAAL,GAAwB,KAAK,iBAAL,GACH,IAAI,CAAC,IAAL,CAAU,IAAI,KAAK,aAAL,GAAqB,KAAK,aAAxC,CADrB;AAED;AACF;AAEH;AACA;AACA;AACA;AACA;AACA;;;AACE,EAAA,SAAS,CAAC,aAAD,EAAgB,SAAhB,EAA2B;AACtC;AACA;AACA;AACA;AAEI,QAAI,YAAY,GAAG,CAAnB;AACA,QAAI,KAAJ;AAEA,IAAA,SAAS,IAAI,IAAb;AAEA,UAAM,iBAAiB,GAAG,IAAI,CAAC,CAAL,KAAW,CAAC,KAAK,aAAN,GAAsB,KAAK,iBAA3B,GAA+C,SAA1D,CAA1B;;AAEA,QAAI,KAAK,aAAL,KAAuB,CAA3B,EAA8B;AAC5B,MAAA,KAAK,GAAG,KAAK,QAAL,GAAgB,KAAK,iBAAL,GAAyB,aAAjD;AAEA,MAAA,YAAY,GAAG,CAAC,aAAa,GAAG,KAAK,GAAG,SAAzB,IAAsC,iBAArD;AAEA,WAAK,QAAL,GAAgB,YAAY,GACP,CAAC,KAAK,iBADX,GACgC,KAAK,GACjC,iBAFpB;AAGD,KARD,MAQO,IAAI,KAAK,aAAL,GAAqB,CAAzB,EAA4B;AACjC,MAAA,KAAK,GAAI,IAAI,KAAK,gBAAV,IACK,KAAK,aAAL,GAAqB,KAAK,iBAA1B,GAA8C,aAA9C,GAA8D,KAAK,QADxE,CAAR;AAGA,YAAM,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,gBAAL,GAAwB,SAAjC,CAAnB;AACA,YAAM,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,gBAAL,GAAwB,SAAjC,CAAnB;AAEA,MAAA,YAAY,GAAG,iBAAiB,IACZ,aAAa,GAAG,UAAhB,GAA6B,KAAK,GAAG,UADzB,CAAhC;AAGA,WAAK,QAAL,GAAgB,YAAY,GACP,CAAC,KAAK,iBADX,GAEI,KAAK,aAFT,GAGI,iBAAiB,IAChB,CAAC,KAAK,gBAAN,GAAyB,aAAzB,GAAyC,UAAzC,GACD,KAAK,gBAAL,GAAwB,KAAxB,GAAgC,UAFf,CAHrC;AAMD,KArCiC,CAuCtC;;;AAEI,WAAO,YAAP;AACD;;AA/Ee;ACJlB;;;AAEA,MAAM,eAAN,CAAsB;AACtB;AACA;AACA;AACE,EAAA,WAAW,CAAC,KAAD,EAAQ;AACjB,SAAK,KAAL,GAAa,KAAb;AAEA,UAAM;AACJ,MAAA,KADI;AAEJ,MAAA,GAFI;AAGJ,MAAA,QAHI;AAIJ,MAAA,QAJI;AAKJ,MAAA,UALI;AAMJ,MAAA,QANI;AAOJ,MAAA,YAPI;AAQJ,MAAA;AARI,QASF,KATJ;AAWJ;;AACI,SAAK,QAAL,GAAgB,QAAhB;AAEA,UAAM,KAAK,GAAG,IAAI,WAAJ,CAAgB,QAAhB,EAA0B,YAA1B,EAAwC,gBAAxC,CAAd;AACA,QAAI,QAAQ,GAAG,IAAI,CAAC,GAAL,EAAf;AACA,QAAI,aAAa,GAAG,KAAK,GAAG,GAA5B;;AAEA,UAAM,aAAa,GAAG,MAAM;AAC1B,UAAI,KAAK,IAAT,EAAe;AACb,QAAA,aAAa,GAAG,KAAK,CAAC,SAAN,CAAgB,aAAhB,EAA+B,IAAI,CAAC,GAAL,KAAa,QAA5C,CAAhB,CADa,CAGrB;;AACQ,YAAI,IAAI,CAAC,GAAL,CAAS,aAAT,IAA0B,CAA1B,IAA+B,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,QAAf,IAA2B,EAA9D,EAAkE;AAC1E;AACU,UAAA,QAAQ,CAAC,GAAD,CAAR;;AACA,cAAI,UAAJ,EAAgB;AACd,YAAA,UAAU;AACX;;AACD,eAAK,QAAL;AACD,SAPD,MAOO;AACL,UAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,EAAX;AACA,UAAA,QAAQ,CAAC,aAAa,GAAG,GAAjB,CAAR;AACA,eAAK,IAAL,GAAY,qBAAqB,CAAC,aAAD,CAAjC;AACD;AACF;AACF,KAlBD;;AAoBA,SAAK,IAAL,GAAY,qBAAqB,CAAC,aAAD,CAAjC;AACD,GA9CmB,CAgDtB;;;AACE,EAAA,OAAO,GAAG;AACR,QAAI,KAAK,IAAL,IAAa,CAAjB,EAAoB;AAClB,MAAA,oBAAoB,CAAC,KAAK,IAAN,CAApB;AACD;;AACD,SAAK,IAAL,GAAY,IAAZ;AACD;;AAtDmB;ACDtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAM,UAAN,CAAiB;AACf,EAAA,WAAW,GAAG;AAChB;AACI,SAAK,gBAAL,GAAwB,EAAxB;AACD;AAEH;AACA;AACA;;;AACE,EAAA,WAAW,CAAC,KAAD,EAAQ;AACjB,SAAK,MAAL,CAAY,KAAZ,EAAmB,IAAnB;AACD;AAEH;AACA;AACA;;;AACE,EAAA,eAAe,CAAC,KAAD,EAAQ;AACrB,SAAK,MAAL,CAAY,KAAZ;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,MAAM,CAAC,KAAD,EAAQ,QAAR,EAAkB;AAC1B;AACI,QAAI,SAAJ;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,SAAS,GAAG,IAAI,eAAJ,CAAoB,KAApB,CAAZ;AACD,KAFD,MAEO;AACL,MAAA,SAAS,GAAG,IAAI,YAAJ,CAAiB,KAAjB,CAAZ;AACD;;AAED,SAAK,gBAAL,CAAsB,IAAtB,CAA2B,SAA3B;;AACA,IAAA,SAAS,CAAC,QAAV,GAAqB,MAAM,KAAK,IAAL,CAAU,SAAV,CAA3B;;AAEA,WAAO,SAAP;AACD;AAEH;AACA;AACA;;;AACE,EAAA,IAAI,CAAC,SAAD,EAAY;AACd,IAAA,SAAS,CAAC,OAAV;AACA,UAAM,KAAK,GAAG,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,SAA9B,CAAd;;AACA,QAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,WAAK,gBAAL,CAAsB,MAAtB,CAA6B,KAA7B,EAAoC,CAApC;AACD;AACF;;AAED,EAAA,OAAO,GAAG;AAAA;AACR,SAAK,gBAAL,CAAsB,OAAtB,CAA+B,SAAD,IAAe;AAC3C,MAAA,SAAS,CAAC,OAAV;AACD,KAFD;AAGA,SAAK,gBAAL,GAAwB,EAAxB;AACD;AAEH;AACA;AACA;;;AACE,EAAA,UAAU,GAAG;AACX,SAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,MAAtB,CAA8B,SAAD,IAAe;AAClE,UAAI,SAAS,CAAC,KAAV,CAAgB,KAApB,EAA2B;AACzB,QAAA,SAAS,CAAC,OAAV;AACA,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD,KAPuB,CAAxB;AAQD;;AAED,EAAA,cAAc,GAAG;AACf,SAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,MAAtB,CAA8B,SAAD,IAAe;AAClE,UAAI,SAAS,CAAC,KAAV,CAAgB,YAApB,EAAkC;AAChC,QAAA,SAAS,CAAC,OAAV;AACA,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD,KAPuB,CAAxB;AAQD;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACE,EAAA,YAAY,GAAG;AACb,WAAO,KAAK,gBAAL,CAAsB,IAAtB,CAA4B,SAAD,IAAe;AAC/C,aAAO,SAAS,CAAC,KAAV,CAAgB,KAAvB;AACD,KAFM,CAAP;AAGD;;AAlGc;AClCjB;;AAEA;AACA;AACA;AACA;;;AACA,MAAM,WAAN,CAAkB;AAClB;AACA;AACA;AACE,EAAA,WAAW,CAAC,IAAD,EAAO;AAChB,SAAK,IAAL,GAAY,IAAZ;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,IAAI,CAAC,OAArB,EAA8B,OAA9B,EAAuC,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAvC;AACD;AAEH;AACA;AACA;AACA;;;AACE,EAAA,QAAQ,CAAC,CAAD,EAAI;AACV,IAAA,CAAC,CAAC,cAAF;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,KAAK,IAA3B;AACA,QAAI;AAAE,MAAA,MAAF;AAAU,MAAA;AAAV,QAAqB,CAAzB;;AAEA,QAAI,CAAC,SAAL,EAAgB;AACd;AACD;;AAED,QAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,OAAnB,EAA4B;AAAE,MAAA,aAAa,EAAE;AAAjB,KAA5B,EAAkD,gBAAtD,EAAwE;AACtE;AACD;;AAED,QAAI,CAAC,CAAC,OAAF,IAAa,KAAK,IAAL,CAAU,OAAV,CAAkB,WAAnC,EAAgD;AACpD;AACM,UAAI,SAAS,CAAC,UAAV,EAAJ,EAA4B;AAC1B,YAAI,UAAU,GAAG,CAAC,MAAlB;;AACA,YAAI,CAAC,CAAC,SAAF,KAAgB;AAAC;AAArB,UAA4C;AAC1C,UAAA,UAAU,IAAI,IAAd;AACD,SAFD,MAEO;AACL,UAAA,UAAU,IAAI,CAAC,CAAC,SAAF,GAAc,CAAd,GAAkB,KAAhC;AACD;;AACD,QAAA,UAAU,GAAG,KAAK,UAAlB;AAEA,cAAM,aAAa,GAAG,SAAS,CAAC,aAAV,GAA0B,UAAhD;AACA,QAAA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC;AAC9B,UAAA,CAAC,EAAE,CAAC,CAAC,OADyB;AAE9B,UAAA,CAAC,EAAE,CAAC,CAAC;AAFyB,SAAhC;AAID;AACF,KAjBD,MAiBO;AACX;AACM,UAAI,SAAS,CAAC,UAAV,EAAJ,EAA4B;AAC1B,YAAI,CAAC,CAAC,SAAF,KAAgB;AAAC;AAArB,UAA4C;AACpD;AACU,UAAA,MAAM,IAAI,EAAV;AACA,UAAA,MAAM,IAAI,EAAV;AACD;;AAED,QAAA,SAAS,CAAC,KAAV,CACE,SAAS,CAAC,GAAV,CAAc,CAAd,GAAkB,MADpB,EAEE,SAAS,CAAC,GAAV,CAAc,CAAd,GAAkB,MAFpB;AAID;AACF;AACF;;AA1De;ACJlB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;AACA,SAAS,cAAT,CAAwB,QAAxB,EAAkC;AAChC,MAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACI,WAAO,QAAP;AACD;;AAED,MAAI,CAAC,QAAD,IAAa,CAAC,QAAQ,CAAC,WAA3B,EAAwC;AACtC,WAAO,EAAP;AACD;;AAED,QAAM,OAAO,GAAG,QAAhB;AACA,MAAI,GAAG,GAAG,uFAAV,CAjBgC,CAkBlC;;AACE,EAAA,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,IAAhB,CAA4C,OAAO,CAAC,IAAR,IAAgB,EAA5D,CAAN,CAnBgC,CAqBlC;AACA;AACA;AACA;AACA;;AACE,MAAI,OAAO,CAAC,SAAZ,EAAuB;AACrB,IAAA,GAAG,IAAI,gDAAgD,OAAO,CAAC,SAAxD,GAAoE,KAA3E;AACD;;AAED,EAAA,GAAG,IAAI,OAAO,CAAC,KAAf;AAEA,EAAA,GAAG,IAAI,QAAP;AAEA,SAAO,GAAP;AACD;;AAED,MAAM,SAAN,CAAgB;AAChB;AACA;AACA;AACA;AACE,EAAA,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa;AACtB,UAAM,IAAI,GAAG,IAAI,CAAC,IAAL,IAAa,IAAI,CAAC,SAA/B;AACA,QAAI,WAAW,GAAG,IAAI,CAAC,IAAvB,CAFsB,CAI1B;;AACI,QAAI,IAAI,CAAC,OAAL,CAAa,IAAb,MAAuB,KAA3B,EAAkC;AACtC;AACM;AACD,KARqB,CAU1B;AACA;;;AACI,QAAI,OAAO,IAAI,CAAC,OAAL,CAAa,IAAI,GAAG,KAApB,CAAP,KAAsC,QAA1C,EAAoD;AACxD;AACA;AACA;AACA;AACA;AACM,MAAA,WAAW,GAAG,IAAI,CAAC,OAAL,CAAa,IAAI,GAAG,KAApB,CAAd;AACD;;AAED,IAAA,IAAI,CAAC,QAAL,CAAc,iBAAd,EAAiC;AAAE,MAAA;AAAF,KAAjC;AAEA,QAAI,SAAS,GAAG,EAAhB;;AACA,QAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,MAAA,SAAS,IAAI,eAAb;AACA,MAAA,SAAS,IAAK,IAAI,CAAC,SAAL,IAAmB,iBAAgB,IAAI,CAAC,IAAK,EAA3D;AACD,KAHD,MAGO;AACL,MAAA,SAAS,IAAK,IAAI,CAAC,SAAL,IAAmB,SAAQ,IAAI,CAAC,IAAK,EAAnD;AACD;AAEL;;;AACI,QAAI,OAAJ;AACA,QAAI,OAAO,GAAG,IAAI,CAAC,QAAL,GAAiB,IAAI,CAAC,OAAL,IAAgB,QAAjC,GAA8C,IAAI,CAAC,OAAL,IAAgB,KAA5E;AACA,IAAA,OAAO,GAA+C,OAAO,CAAC,WAAR,EAAtD;AACA,IAAA,OAAO,GAAG,aAAa,CAAC,SAAD,EAAY,OAAZ,CAAvB;;AAEA,QAAI,IAAI,CAAC,QAAT,EAAmB;AACvB;AACM,MAAA,OAAO,GAAG,aAAa,CAAC,SAAD,EAAY,OAAZ,CAAvB;;AACA,UAAI,OAAO,KAAK,QAAhB,EAA0B;AAChC;AAA0C,QAAA,OAAD,CAAU,IAAV,GAAiB,QAAjB;AAClC;;AAED,UAAI;AAAE,QAAA;AAAF,UAAY,IAAhB;AACA,YAAM;AAAE,QAAA;AAAF,UAAgB,IAAtB,CARiB,CAUvB;;AACM,UAAI,OAAO,IAAI,CAAC,OAAL,CAAa,IAAI,GAAG,OAApB,CAAP,KAAwC,QAA5C,EAAsD;AAC5D;AACQ,QAAA,KAAK,GAAG,IAAI,CAAC,OAAL,CAAa,IAAI,GAAG,OAApB,CAAR;AACD;;AAED,UAAI,KAAJ,EAAW;AACT,QAAA,OAAO,CAAC,KAAR,GAAgB,KAAhB;AACD;;AAED,UAAI,SAAS,IAAI,KAAjB,EAAwB;AAC9B;AAAoC,QAAA,OAAD,CAAU,YAAV,CAAuB,YAAvB,EAAqC,SAAS,IAAI,KAAlD;AAC5B;AACF;;AAED,IAAA,OAAO,CAAC,SAAR,GAAoB,cAAc,CAAC,WAAD,CAAlC;;AAEA,QAAI,IAAI,CAAC,MAAT,EAAiB;AACf,MAAA,IAAI,CAAC,MAAL,CAAY,OAAZ,EAAqB,IAArB;AACD;;AAED,QAAI,IAAI,CAAC,OAAT,EAAkB;AAChB,MAAA,OAAO,CAAC,OAAR,GAAmB,CAAD,IAAO;AACvB,YAAI,OAAO,IAAI,CAAC,OAAZ,KAAwB,QAA5B,EAAsC;AACpC,UAAA,IAAI,CAAC,IAAI,CAAC,OAAN,CAAJ;AACD,SAFD,MAEO;AACL,UAAA,IAAI,CAAC,OAAL,CAAa,CAAb,EAAgB,OAAhB,EAAyB,IAAzB;AACD;AACF,OAND;AAOD,KA5EqB,CA8E1B;;;AACI,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAL,IAAiB,KAAlC;AACA,QAAI,SAAJ;;AACA,QAAI,QAAQ,KAAK,KAAjB,EAAwB;AACtB,UAAI,CAAC,IAAI,CAAC,MAAV,EAAkB;AAChB,QAAA,IAAI,CAAC,MAAL,GAAc,aAAa,CAAC,mCAAD,EAAsC,KAAtC,EAA6C,IAAI,CAAC,UAAlD,CAA3B;AACD;;AACD,MAAA,SAAS,GAAG,IAAI,CAAC,MAAjB;AACD,KALD,MAKO;AACX;AACA;AACM,MAAA,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,qBAAtB;;AAEA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,QAAA,SAAS,GAAG,IAAI,CAAC,UAAjB;AACD,OAFD,MAEO;AACb;AACQ,QAAA,SAAS,GAAG,IAAI,CAAC,OAAjB;AACD;AACF;;AAED,IAAA,SAAS,CAAC,WAAV,CAAsB,IAAI,CAAC,YAAL,CAAkB,WAAlB,EAA+B,OAA/B,EAAwC,IAAxC,CAAtB;AACD;;AAzGa;AC5EhB;AACA;AACA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS,eAAT,CAAyB,OAAzB,EAAkC,IAAlC,EAAwC,YAAxC,EAAsD;AACpD,EAAA,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,qBAAtB;AACA,EAAA,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtB,QAAI,CAAC,IAAI,CAAC,OAAL,CAAa,IAAlB,EAAwB;AACtB,UAAI,YAAJ,EAAkB;AACxB;AACS,QAAA,OAAD,CAAU,QAAV,GAAqB,EAAE,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,WAAL,KAAqB,CAAxC,CAArB;AACD,OAHD,MAGO;AACb;AACS,QAAA,OAAD,CAAU,QAAV,GAAqB,EAAE,IAAI,CAAC,SAAL,GAAiB,CAAnB,CAArB;AACD;AACF;AACF,GAVD;AAWD;AAED;;;AACO,MAAM,SAAS,GAAG;AACvB,EAAA,IAAI,EAAE,WADiB;AAEvB,EAAA,SAAS,EAAE,2BAFY;AAGvB,EAAA,KAAK,EAAE,UAHgB;AAIvB,EAAA,KAAK,EAAE,EAJgB;AAKvB,EAAA,QAAQ,EAAE,IALa;AAMvB,EAAA,QAAQ,EAAE,SANa;AAOvB,EAAA,IAAI,EAAE;AACJ,IAAA,WAAW,EAAE,IADT;AAEJ,IAAA,IAAI,EAAE,EAFF;AAGJ,IAAA,KAAK,EAAE,2EAHH;AAIJ,IAAA,SAAS,EAAE;AAJP,GAPiB;AAavB,EAAA,OAAO,EAAE,MAbc;AAcvB,EAAA,MAAM,EAAE;AAde,CAAlB;AAiBP;;AACO,MAAM,SAAS,GAAG;AACvB,EAAA,IAAI,EAAE,WADiB;AAEvB,EAAA,SAAS,EAAE,2BAFY;AAGvB,EAAA,KAAK,EAAE,MAHgB;AAIvB,EAAA,KAAK,EAAE,EAJgB;AAKvB,EAAA,QAAQ,EAAE,IALa;AAMvB,EAAA,QAAQ,EAAE,SANa;AAOvB,EAAA,IAAI,EAAE;AACJ,IAAA,WAAW,EAAE,IADT;AAEJ,IAAA,IAAI,EAAE,EAFF;AAGJ,IAAA,KAAK,EAAE,sCAHH;AAIJ,IAAA,SAAS,EAAE;AAJP,GAPiB;AAavB,EAAA,OAAO,EAAE,MAbc;AAcvB,EAAA,MAAM,EAAE,CAAC,EAAD,EAAK,IAAL,KAAc;AACpB,IAAA,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,IAAX,CAAf;AACD;AAhBsB,CAAlB;AC/CP;;AACA,MAAM,WAAW,GAAG;AAClB,EAAA,IAAI,EAAE,OADY;AAElB,EAAA,KAAK,EAAE,OAFW;AAGlB,EAAA,KAAK,EAAE,EAHW;AAIlB,EAAA,QAAQ,EAAE,IAJQ;AAKlB,EAAA,IAAI,EAAE;AACJ,IAAA,WAAW,EAAE,IADT;AAEJ,IAAA,KAAK,EAAE,uFAFH;AAGJ,IAAA,SAAS,EAAE;AAHP,GALY;AAUlB,EAAA,OAAO,EAAE;AAVS,CAApB;ACDA;;AACA,MAAM,UAAU,GAAG;AACjB,EAAA,IAAI,EAAE,MADW;AAEjB,EAAA,KAAK,EAAE,MAFU;AAGjB,EAAA,KAAK,EAAE,EAHU;AAIjB,EAAA,QAAQ,EAAE,IAJO;AAKjB,EAAA,IAAI,EAAE;AACJ,IAAA,WAAW,EAAE,IADT;AAER;AACI,IAAA,KAAK,EAAE,mGACC,6EADD,GAEC,6EALJ;AAMJ,IAAA,SAAS,EAAE;AANP,GALW;AAajB,EAAA,OAAO,EAAE;AAbQ,CAAnB;ACDA;;AACO,MAAM,gBAAgB,GAAG;AAC9B,EAAA,IAAI,EAAE,WADwB;AAE9B,EAAA,QAAQ,EAAE,KAFoB;AAG9B,EAAA,KAAK,EAAE,CAHuB;AAI9B,EAAA,IAAI,EAAE;AACJ,IAAA,WAAW,EAAE,IADT;AAER;AACI,IAAA,KAAK,EAAE,iIAHH;AAIJ,IAAA,SAAS,EAAE;AAJP,GAJwB;AAU9B,EAAA,MAAM,EAAE,CAAC,gBAAD,EAAmB,IAAnB,KAA4B;AACtC;AACI,QAAI,SAAJ;AACJ;;AACI,QAAI,YAAJ;AAEJ;AACA;AACA;AACA;;AACI,UAAM,oBAAoB,GAAG,CAAC,SAAD,EAAY,GAAZ,KAAoB;AAC/C,MAAA,gBAAgB,CAAC,SAAjB,CAA2B,GAAG,GAAG,KAAH,GAAW,QAAzC,EAAmD,sBAAsB,SAAzE;AACD,KAFD;AAIJ;AACA;AACA;;;AACI,UAAM,sBAAsB,GAAI,OAAD,IAAa;AAC1C,UAAI,SAAS,KAAK,OAAlB,EAA2B;AACzB,QAAA,SAAS,GAAG,OAAZ;AACA,QAAA,oBAAoB,CAAC,QAAD,EAAW,OAAX,CAApB;AACD;AACF,KALD;;AAOA,UAAM,yBAAyB,GAAG,MAAM;AACtC,UAAI,CAAC,IAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,SAAvB,EAAL,EAAyC;AACvC,QAAA,sBAAsB,CAAC,KAAD,CAAtB;;AACA,YAAI,YAAJ,EAAkB;AAChB,UAAA,YAAY,CAAC,YAAD,CAAZ;AACA,UAAA,YAAY,GAAG,IAAf;AACD;;AACD;AACD;;AAED,UAAI,CAAC,YAAL,EAAmB;AACzB;AACQ,QAAA,YAAY,GAAG,UAAU,CAAC,MAAM;AAC9B,UAAA,sBAAsB,CAAC,IAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,SAAvB,EAAD,CAAtB;AACA,UAAA,YAAY,GAAG,IAAf;AACD,SAHwB,EAGtB,IAAI,CAAC,OAAL,CAAa,cAHS,CAAzB;AAID;AACF,KAjBD;;AAmBA,IAAA,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,yBAAlB;AAEA,IAAA,IAAI,CAAC,EAAL,CAAQ,cAAR,EAAyB,CAAD,IAAO;AAC7B,UAAI,IAAI,CAAC,SAAL,KAAmB,CAAC,CAAC,KAAzB,EAAgC;AAC9B,QAAA,yBAAyB;AAC1B;AACF,KAJD,EA7CkC,CAmDtC;;AACI,IAAA,IAAI,CAAC,EAAL,CAAQ,yBAAR,GAAoC,yBAApC;AACD;AA/D6B,CAAzB;ACDP;;AACO,MAAM,gBAAgB,GAAG;AAC9B,EAAA,IAAI,EAAE,SADwB;AAE9B,EAAA,KAAK,EAAE,CAFuB;AAG9B,EAAA,MAAM,EAAE,CAAC,cAAD,EAAiB,IAAjB,KAA0B;AAChC,IAAA,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtB,MAAA,cAAc,CAAC,SAAf,GAA4B,IAAI,CAAC,SAAL,GAAiB,CAAlB,GACG,IAAI,CAAC,OAAL,CAAa,iBADhB,GAEG,IAAI,CAAC,WAAL,EAF9B;AAGD,KAJD;AAKD;AAT6B,CAAzB;ACMP;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS,WAAT,CAAqB,EAArB,EAAyB,UAAzB,EAAqC;AACnC,EAAA,EAAE,CAAC,SAAH,CAAa,UAAU,GAAG,KAAH,GAAW,QAAlC,EAA4C,iBAA5C;AACD;;AAED,MAAM,EAAN,CAAS;AACT;AACA;AACA;AACE,EAAA,WAAW,CAAC,IAAD,EAAO;AAChB,SAAK,IAAL,GAAY,IAAZ;AAEJ;;AACI,SAAK,yBAAL,GAAiC,SAAjC;AAEJ;;AACI,SAAK,qBAAL,GAA6B,SAA7B;AACD;;AAED,EAAA,IAAI,GAAG;AACL,UAAM;AAAE,MAAA;AAAF,QAAW,IAAjB;AACA,SAAK,YAAL,GAAoB,KAApB;AACJ;;AACI,SAAK,cAAL,GAAsB,CACpB,WADoB,EAEpB,SAFoB,EAGpB,SAHoB,EAIpB,UAJoB,EAKpB,gBALoB,EAMpB,gBANoB,CAAtB;AASA,IAAA,IAAI,CAAC,QAAL,CAAc,YAAd,EAbK,CAeT;;AACI,SAAK,cAAL,CAAoB,IAApB,CAAyB,CAAC,CAAD,EAAI,CAAJ,KAAU;AACvC;AACM,aAAO,CAAC,CAAC,CAAC,KAAF,IAAW,CAAZ,KAAkB,CAAC,CAAC,KAAF,IAAW,CAA7B,CAAP;AACD,KAHD;AAKJ;;AACI,SAAK,KAAL,GAAa,EAAb;AAEA,SAAK,YAAL,GAAoB,IAApB;AACA,SAAK,cAAL,CAAoB,OAApB,CAA6B,aAAD,IAAmB;AAC7C,WAAK,eAAL,CAAqB,aAArB;AACD,KAFD;AAIA,IAAA,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtB,MAAA,IAAI,CAAC,OAAL,CAAa,SAAb,CAAuB,IAAI,CAAC,WAAL,OAAuB,CAAvB,GAA2B,KAA3B,GAAmC,QAA1D,EAAoE,iBAApE;AACD,KAFD;AAIA,IAAA,IAAI,CAAC,EAAL,CAAQ,eAAR,EAAyB,MAAM,KAAK,gBAAL,EAA/B;AACD;AAEH;AACA;AACA;;;AACE,EAAA,eAAe,CAAC,WAAD,EAAc;AAC3B,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,KAAL,CAAW,IAAX,CACE,IAAI,SAAJ,CAAc,KAAK,IAAnB,EAAyB,WAAzB,CADF;AAGD,KAJD,MAIO;AACL,WAAK,cAAL,CAAoB,IAApB,CAAyB,WAAzB;AACD;AACF;AAEH;AACA;AACA;AACA;;;AACE,EAAA,gBAAgB,GAAG;AACjB,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,SAAZ;AAAuB,MAAA;AAAvB,QAAmC,KAAK,IAA9C;AACA,QAAI;AAAE,MAAA;AAAF,QAAoB,SAAxB;;AAEA,QAAI,KAAK,IAAL,CAAU,MAAV,CAAiB,SAArB,EAAgC;AAC9B;AACD,KANgB,CAQrB;;;AACI,QAAI,CAAC,KAAK,IAAL,CAAU,MAAV,CAAiB,MAAtB,EAA8B;AAC5B,MAAA,aAAa,GAAG,SAAS,CAAC,UAAV,CAAqB,OAArC;AACD;;AAED,QAAI,aAAa,KAAK,KAAK,qBAA3B,EAAkD;AAChD;AACD;;AACD,SAAK,qBAAL,GAA6B,aAA7B;AAEA,UAAM,iBAAiB,GAAG,SAAS,CAAC,UAAV,CAAqB,OAArB,GAA+B,SAAS,CAAC,UAAV,CAAqB,SAA9E,CAlBiB,CAoBrB;;AACI,QAAI,IAAI,CAAC,GAAL,CAAS,iBAAT,IAA8B,IAA9B,IAAsC,CAAC,SAAS,CAAC,UAAV,EAA3C,EAAmE;AACvE;AACM,MAAA,WAAW,CAAC,QAAD,EAAW,KAAX,CAAX;AACA,MAAA,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAA0B,oBAA1B;AACA;AACD;;AAED,IAAA,QAAQ,CAAC,SAAT,CAAmB,GAAnB,CAAuB,oBAAvB;AAEA,UAAM,kBAAkB,GAAG,aAAa,KAAK,SAAS,CAAC,UAAV,CAAqB,OAAvC,GACvB,SAAS,CAAC,UAAV,CAAqB,SADE,GACU,SAAS,CAAC,UAAV,CAAqB,OAD1D;AAGA,IAAA,WAAW,CAAC,QAAD,EAAW,kBAAkB,IAAI,aAAjC,CAAX;;AAEA,QAAI,OAAO,CAAC,gBAAR,KAA6B,MAA7B,IACG,OAAO,CAAC,gBAAR,KAA6B,eADpC,EACqD;AACnD,MAAA,QAAQ,CAAC,SAAT,CAAmB,GAAnB,CAAuB,qBAAvB;AACD;AACF;;AA1GM;ACvBT;;AACA;;AAEA;;AAEA;AACA;AACA;;;AACA,SAAS,kBAAT,CAA4B,EAA5B,EAAgC;AAC9B,QAAM,aAAa,GAAG,EAAE,CAAC,qBAAH,EAAtB;AACA,SAAO;AACL,IAAA,CAAC,EAAE,aAAa,CAAC,IADZ;AAEL,IAAA,CAAC,EAAE,aAAa,CAAC,GAFZ;AAGL,IAAA,CAAC,EAAE,aAAa,CAAC;AAHZ,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS,yBAAT,CAAmC,EAAnC,EAAuC,UAAvC,EAAmD,WAAnD,EAAgE;AAC9D,QAAM,aAAa,GAAG,EAAE,CAAC,qBAAH,EAAtB,CAD8D,CAGhE;AACA;;AACE,QAAM,MAAM,GAAG,aAAa,CAAC,KAAd,GAAsB,UAArC;AACA,QAAM,MAAM,GAAG,aAAa,CAAC,MAAd,GAAuB,WAAtC;AACA,QAAM,aAAa,GAAG,MAAM,GAAG,MAAT,GAAkB,MAAlB,GAA2B,MAAjD;AAEA,QAAM,OAAO,GAAG,CAAC,aAAa,CAAC,KAAd,GAAsB,UAAU,GAAG,aAApC,IAAqD,CAArE;AACA,QAAM,OAAO,GAAG,CAAC,aAAa,CAAC,MAAd,GAAuB,WAAW,GAAG,aAAtC,IAAuD,CAAvE;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,QAAM,MAAM,GAAG;AACb,IAAA,CAAC,EAAE,aAAa,CAAC,IAAd,GAAqB,OADX;AAEb,IAAA,CAAC,EAAE,aAAa,CAAC,GAAd,GAAoB,OAFV;AAGb,IAAA,CAAC,EAAE,UAAU,GAAG;AAHH,GAAf,CAnB8D,CAyBhE;AACA;;AACE,EAAA,MAAM,CAAC,SAAP,GAAmB;AACjB,IAAA,CAAC,EAAE,aAAa,CAAC,KADA;AAEjB,IAAA,CAAC,EAAE,aAAa,CAAC,MAFA;AAGjB,IAAA,CAAC,EAAE,OAHc;AAIjB,IAAA,CAAC,EAAE;AAJc,GAAnB;AAOA,SAAO,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS,cAAT,CAAwB,KAAxB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD;AAC1D;AACE,QAAM,KAAK,GAAG,QAAQ,CAAC,QAAT,CAAkB,aAAlB,EAAiC;AAC7C,IAAA,KAD6C;AAE7C,IAAA,QAF6C;AAG7C,IAAA;AAH6C,GAAjC,CAAd,CAFwD,CAO1D;;AACE,MAAI,KAAK,CAAC,WAAV,EAAuB;AACzB;AACI,WAAO,KAAK,CAAC,WAAb;AACD;;AAED,QAAM;AAAE,IAAA;AAAF,MAAc,QAApB;AACA,MAAI,WAAJ;AACF;;AACE,MAAI,SAAJ;;AAEA,MAAI,OAAO,IAAI,QAAQ,CAAC,OAAT,CAAiB,aAAjB,KAAmC,KAAlD,EAAyD;AACvD,UAAM,aAAa,GAAG,QAAQ,CAAC,OAAT,CAAiB,aAAjB,IAAkC,KAAxD;AACA,IAAA,SAAS,GAAG,OAAO,CAAC,OAAR,CAAgB,aAAhB,IACR,OADQ,GACE,OAAO,CAAC,aAAR,CAAsB,aAAtB,CADd;AAED;;AAED,EAAA,SAAS,GAAG,QAAQ,CAAC,YAAT,CAAsB,SAAtB,EAAiC,SAAjC,EAA4C,QAA5C,EAAsD,KAAtD,CAAZ;;AAEA,MAAI,SAAJ,EAAe;AACb,QAAI,CAAC,QAAQ,CAAC,YAAd,EAA4B;AAC1B,MAAA,WAAW,GAAG,kBAAkB,CAAC,SAAD,CAAhC;AACD,KAFD,MAEO;AACL,MAAA,WAAW,GAAG,yBAAyB,CACrC,SADqC,EAErC,QAAQ,CAAC,KAAT,IAAkB,QAAQ,CAAC,CAFU,EAGrC,QAAQ,CAAC,MAAT,IAAmB,QAAQ,CAAC,CAHS,CAAvC;AAKD;AACF;;AAED,SAAO,QAAQ,CAAC,YAAT,CAAsB,aAAtB,EAAqC,WAArC,EAAkD,QAAlD,EAA4D,KAA5D,CAAP;AACF;AC3GA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAC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","sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement=} element thumbnail element\r\n * @prop {string=} src image URL\r\n * @prop {string=} srcset image srcset\r\n * @prop {number=} w image width (deprecated)\r\n * @prop {number=} h image height (deprecated)\r\n * @prop {number=} width image width\r\n * @prop {number=} height image height\r\n * @prop {string=} msrc placeholder image URL that's displayed before large image is loaded\r\n * @prop {string=} alt image alt text\r\n * @prop {boolean=} thumbCropped whether thumbnail is cropped client-side or not\r\n * @prop {string=} html html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"]},"metadata":{},"sourceType":"module"}